

package compiler.pp1;
/* import sekcija sve sto nam treba za parser klasu */
/* od ovoga nastaju klase parser i action */
import java_cup.runtime.*;
import org.apache.log4j.*;

//ovo se generise pozivom parsera
import compiler.pp1.ast.*;

//kod parsera
parser code {:

	Logger log = Logger.getLogger(getClass());
	boolean errorDetected;


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     //ne mozemo da nsatavimo parsiranje
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

  //prijava greske kad moze da se oporavi od greske
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

  //ako oporavak nije moguc
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

//string builder koristimo za gresku
    public void report_error(String message, Object info) {
        errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left); //left - sadrzi broj linije
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

//resetovanje dohvatanja svakog tokena od lexera
scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE;
terminal CONST,SEMI, COMMA, COLUMN, EQUAL, LBRACK, RBRACK, RECORD;
terminal CLASS, EXTND, LPAREN, RPAREN, DOT;
terminal VOID, NEW;
terminal Integer NUMBER, BOOL;
terminal String IDENT, CHAR;
terminal IF, ELSE, GOTO, DO, WHILE, BREAK, CONT, RETURN, READ, PRINT;
terminal EQU, NEQ, GRT, GRE, LES, LEE, AND, OR;
terminal MUL, DIV, MOD, PLUS, MINUS, INC, DEC, THIS, SUPER;



nonterminal Program Program;
nonterminal DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal RecordDecl RecordDecl;
nonterminal MethodDecl MethodDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal VarDeclList VarDeclList;
nonterminal InnerVarDeclList InnerVarDeclList;
nonterminal InnerMethodBlock InnerMethodBlock;
nonterminal ConstructorDecl ConstructorDecl;
nonterminal StatementList StatementList;
nonterminal FormParList FormParList;
nonterminal Statement Statement;
nonterminal SingleStatement SingleStatement;
nonterminal Statements Statements;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal DesignStatement DesignStatement;
nonterminal PrintSize PrintSize;
nonterminal DsgnOp DsgnOp;
nonterminal AccessDsgn AccessDsgn;
nonterminal Assignop Assignop;
nonterminal ActPars ActPars;
nonterminal ActParsList ActParsList;
nonterminal Relop Relop;
nonterminal DoStart DoStart;
nonterminal SuperDsgn SuperDsgn;
nonterminal Mulop Mulop;
nonterminal Addop Addop;
nonterminal IfElseBlock IfElseBlock;
nonterminal RelopEq RelopEq;
nonterminal CallName CallName;
nonterminal FactorDesignator FactorDesignator;
nonterminal VarDeclGlobal VarDeclGlobal;
nonterminal VarDeclCheck VarDeclCheck;
nonterminal Xx Xx;
nonterminal VarDeclListNoC VarDeclListNoC;
nonterminal ClassDeclList ClassDeclList;
nonterminal ClassVarDecl ClassVarDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Cond, CondTerm, CondFact, Designator, Label;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName,ConstLit, RecordName, MethodName, Type,Factor, Term, Expr, CopyDsgn;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassName, ExtendsDecl, ConstructorName, RetType, MethodDeclChecker;
nonterminal ConstDeclElem ConstDeclElem;
nonterminal VarDeclElem VarDeclElem;
nonterminal VarDeclElemNoC VarDeclElemNoC;
nonterminal LabelDef LabelDef;
nonterminal BaseDsgn BaseDsgn;
nonterminal CondOr CondOr;
nonterminal IfCond IfCond;
nonterminal ElseCond ElseCond;
nonterminal IfInit IfInit;

precedence left ELSE;

Program ::= (Program) PROG ProgramName:P1 DeclList:D2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

ProgramName::= (ProgramName) IDENT:name {: RESULT=new ProgramName(name); RESULT.setLine(nameleft); :};

DeclList ::= (DeclListConst) DeclList:D1 ConstDecl:C2 {: RESULT=new DeclListConst(D1, C2); RESULT.setLine(D1left); :}
            |
            (DeclListVar) DeclList:D1 VarDeclGlobal:V2 {: RESULT=new DeclListVar(D1, V2); RESULT.setLine(D1left); :}
            |
            (DeclListClass) DeclList:D1 ClassDecl:C2 {: RESULT=new DeclListClass(D1, C2); RESULT.setLine(D1left); :}
            |
            (DeclListRecord) DeclList:D1 RecordDecl:R2 {: RESULT=new DeclListRecord(D1, R2); RESULT.setLine(D1left); :}
            |
            (DeclListEmpty) {: RESULT=new DeclListEmpty(); :} /* epsilon */
            ;
ConstDecl ::= (DeclConst) CONST Type:varsType ConstDeclList:decls SEMI {: RESULT=new DeclConst(varsType, decls); RESULT.setLine(varsTypeleft); :}
               |
               (ConstDeclError) CONST error SEMI:l {: RESULT=new ConstDeclError(); :}
               ;

ConstDeclList ::= (ConstDeclMultiple) ConstDeclList:C1 COMMA ConstDeclElem:C2 {: RESULT=new ConstDeclMultiple(C1, C2); RESULT.setLine(C1left); :}
                |
                (ConstDeclSingle) ConstDeclElem:C1 {: RESULT=new ConstDeclSingle(C1); RESULT.setLine(C1left); :}
                ;
ConstDeclElem ::= (ConstDeclElemCorrect) IDENT:varName EQUAL ConstLit:varValue {: RESULT=new ConstDeclElemCorrect(varName, varValue); RESULT.setLine(varNameleft); :}
                |
                (ConstDeclElemError) error {: RESULT=new ConstDeclElemError(); :}
                ;
ConstLit ::=(ConstLitNum) NUMBER:value {: RESULT=new ConstLitNum(value); RESULT.setLine(valueleft); :}
            |
            (ConstLitBool) BOOL:value {: RESULT=new ConstLitBool(value); RESULT.setLine(valueleft); :}
            |
            (ConstLitChar) CHAR:value {: RESULT=new ConstLitChar(value); RESULT.setLine(valueleft); :}
            ;
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

VarDeclGlobal ::= (VarDeclGlobalCorrect) Type:varsType VarDeclList:decls SEMI {: RESULT=new VarDeclGlobalCorrect(varsType, decls); RESULT.setLine(varsTypeleft); :}
                |
                (VarDeclGlobalError) error SEMI:l {: RESULT=new VarDeclGlobalError(); :}
                ;
VarDecl ::= (VarDecl) Type:varsType VarDeclListNoC:decls SEMI {: RESULT=new VarDecl(varsType, decls); RESULT.setLine(varsTypeleft); :};

ClassVarDecl ::= (VarDeclsCorrect) Type:varsType VarDeclListNoC:decls {: RESULT=new VarDeclsCorrect(varsType, decls); RESULT.setLine(varsTypeleft); :};

VarDeclListNoC ::= (VarDeclMultipleNoC) VarDeclListNoC:V1 COMMA VarDeclElemNoC:V2 {: RESULT=new VarDeclMultipleNoC(V1, V2); RESULT.setLine(V1left); :}
                |
                (VarDeclSingleNoC) VarDeclElemNoC:V1 {: RESULT=new VarDeclSingleNoC(V1); RESULT.setLine(V1left); :}
                ;

VarDeclList ::= (VarDeclMultiple) VarDeclList:V1 COMMA VarDeclElem:V2 {: RESULT=new VarDeclMultiple(V1, V2); RESULT.setLine(V1left); :}
                |
                (VarDeclSingle) VarDeclElem:V1 {: RESULT=new VarDeclSingle(V1); RESULT.setLine(V1left); :}
                ;
VarDeclElemNoC ::= (VarDeclElemArrayNoC) IDENT:varName LBRACK RBRACK {: RESULT=new VarDeclElemArrayNoC(varName); RESULT.setLine(varNameleft); :}
                   |
                   (VarDeclElemSingleNoC) IDENT:varName {: RESULT=new VarDeclElemSingleNoC(varName); RESULT.setLine(varNameleft); :}
                   ;
VarDeclElem ::= (VarDeclElemArray) IDENT:varName LBRACK RBRACK {: RESULT=new VarDeclElemArray(varName); RESULT.setLine(varNameleft); :}
                |
                (VarDeclElemSingle) IDENT:varName {: RESULT=new VarDeclElemSingle(varName); RESULT.setLine(varNameleft); :}
                |
                (VarDeclError) error {: RESULT=new VarDeclError(); :}
                ;
ClassDecl ::= (ClassDecl) CLASS ClassName:C1 ExtendsDecl:E2 LBRACE ClassDeclList:vars RBRACE {: RESULT=new ClassDecl(C1, E2, vars); RESULT.setLine(C1left); :};

ClassName ::= (ClassName)IDENT:name {: RESULT=new ClassName(name); RESULT.setLine(nameleft); :};

ExtendsDecl ::= (ExtendsDeclType) EXTND Type:base {: RESULT=new ExtendsDeclType(base); RESULT.setLine(baseleft); :}
                |
                (ExtendsDeclError) error {: RESULT=new ExtendsDeclError(); :}
                |
                (ExtendsDeclEmpty) {: RESULT=new ExtendsDeclEmpty(); :}/* epsilon */
                ;
InnerVarDeclList ::= (InnerVarDecls) InnerVarDeclList:varList VarDecl:var {: RESULT=new InnerVarDecls(varList, var); RESULT.setLine(varListleft); :}
                |
                (InnerVarDeclsEmpty) {: RESULT=new InnerVarDeclsEmpty(); :} /* epsilon */
                ;
ClassDeclList ::= (ClassVarDecls) ClassVarDecl:var SEMI ClassDeclList:varList {: RESULT=new ClassVarDecls(var, varList); RESULT.setLine(varleft); :}
                |
                (ClassVarDeclsError) error SEMI ClassDeclList:varList {: RESULT=new ClassVarDeclsError(varList); RESULT.setLine(varListleft); :}
                |
                (ClassDeclsMethods) InnerMethodBlock:methods {: RESULT=new ClassDeclsMethods(methods); RESULT.setLine(methodsleft); :}
                |
                (ClassDeclsMethodsError) error InnerMethodBlock:methods {: RESULT=new ClassDeclsMethodsError(methods); RESULT.setLine(methodsleft); :}
                |
                (ClassDeclsEmpty) {: RESULT=new ClassDeclsEmpty(); :} /* epsilon */
                ;
InnerMethodBlock ::= (InnerMethodBlockAll) LBRACE ConstructorDecl:constructor MethodDeclList:methods RBRACE {: RESULT=new InnerMethodBlockAll(constructor, methods); RESULT.setLine(constructorleft); :}
                    |
                    (InnerMethodBlockNoConstr) LBRACE MethodDeclList:methods RBRACE {: RESULT=new InnerMethodBlockNoConstr(methods); RESULT.setLine(methodsleft); :}
                    ;
RecordDecl ::= (RecordDecl) RECORD RecordName:R1 LBRACE InnerVarDeclList:vars RBRACE {: RESULT=new RecordDecl(R1, vars); RESULT.setLine(R1left); :};
RecordName ::= (RecordName) IDENT:recordName {: RESULT=new RecordName(recordName); RESULT.setLine(recordNameleft); :};
ConstructorDecl ::= (ConstructorDecl) ConstructorName:name LPAREN RPAREN InnerVarDeclList:vars LBRACE StatementList:statements RBRACE {: RESULT=new ConstructorDecl(name, vars, statements); RESULT.setLine(nameleft); :};
ConstructorName ::= (ConstructorName) IDENT:name {: RESULT=new ConstructorName(name); RESULT.setLine(nameleft); :};

MethodDeclList ::= (MethodDecls) MethodDecl:method MethodDeclList:M1 {: RESULT=new MethodDecls(method, M1); RESULT.setLine(methodleft); :}
				|
				(MethodDeclsEmpty) {: RESULT=new MethodDeclsEmpty(); :} /* epsilon */
				;
MethodDecl ::= (MethodDeclPar) MethodDeclChecker:name LPAREN FormParList:params RPAREN InnerVarDeclList:vars LBRACE StatementList:statements RBRACE {: RESULT=new MethodDeclPar(name, params, vars, statements); RESULT.setLine(nameleft); :}
                |
                (MethodDeclNoPar) MethodDeclChecker:name LPAREN RPAREN InnerVarDeclList:vars LBRACE StatementList:statements RBRACE {: RESULT=new MethodDeclNoPar(name, vars, statements); RESULT.setLine(nameleft); :}
                ;
MethodDeclChecker ::= (MethodDeclChecker) RetType:type MethodName:name {: RESULT=new MethodDeclChecker(type, name); RESULT.setLine(typeleft); :};
RetType ::= (RetTypeType) Type:type {: RESULT=new RetTypeType(type); RESULT.setLine(typeleft); :}
        |
        (RetTypeVoid) VOID {: RESULT=new RetTypeVoid(); :}
        ;
MethodName ::= (MethodName) IDENT:methodName {: RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); :};
FormParList ::= (FormParsMultipleArray) FormParList:F1 COMMA Type:type IDENT:parName LBRACK RBRACK {: RESULT=new FormParsMultipleArray(F1, type, parName); RESULT.setLine(F1left); :}
                |
                (FormParsMultiple) FormParList:F1 COMMA Type:type IDENT:parName {: RESULT=new FormParsMultiple(F1, type, parName); RESULT.setLine(F1left); :}
                |
                (FormParsError) FormParList:F1 COMMA error {: RESULT=new FormParsError(F1); RESULT.setLine(F1left); :}
                |
                (FormParsSingleArray) Type:type IDENT:parName LBRACK RBRACK {: RESULT=new FormParsSingleArray(type, parName); RESULT.setLine(typeleft); :}
                |
                (FormParsSingle) Type:type IDENT:parName {: RESULT=new FormParsSingle(type, parName); RESULT.setLine(typeleft); :}
                                |
                (FormParsSingleError) error {: RESULT=new FormParsSingleError(); :}
                ;
StatementList ::= (StatementsList) StatementList:statements Statement:S1 {: RESULT=new StatementsList(statements, S1); RESULT.setLine(statementsleft); :}
				|
				(StatementsEmpty) {: RESULT=new StatementsEmpty(); :} /* epsilon */
				;
Statement ::= (StatementSingle) SingleStatement:statement {: RESULT=new StatementSingle(statement); RESULT.setLine(statementleft); :}
            |
            (StatementSingleLabel) LabelDef:label SingleStatement:statement {: RESULT=new StatementSingleLabel(label, statement); RESULT.setLine(labelleft); :}
            |
            (StatementMultiple) Statements:S1 {: RESULT=new StatementMultiple(S1); RESULT.setLine(S1left); :}
            ;
LabelDef::= (LabelDef) Label:label COLUMN {: RESULT=new LabelDef(label); RESULT.setLine(labelleft); :};
Statements ::= (StatementsBlock) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementsBlock(S1); RESULT.setLine(S1left); :};

IfInit ::= (IfInit) IF {: RESULT=new IfInit(); :};
IfCond::= (IfCond)IfInit:I1 LPAREN Cond:C2 RPAREN {: RESULT=new IfCond(I1, C2); RESULT.setLine(I1left); :};
ElseCond ::= (ElseCond) ELSE {: RESULT=new ElseCond(); :};

SingleStatement ::= (StmtIfElse) IfCond:I1 Statement:ifStmt ElseCond:E2 Statement:elseStmt {: RESULT=new StmtIfElse(I1, ifStmt, E2, elseStmt); RESULT.setLine(I1left); :}
            |
            (StmtIfElseError) IfInit:I1 LPAREN error RPAREN Statement:ifStmt ElseCond:E2 Statement:elseStmt {: RESULT=new StmtIfElseError(I1, ifStmt, E2, elseStmt); RESULT.setLine(I1left); :}
            |
            (StmtIf) IfCond:I1 Statement:ifStmt {: RESULT=new StmtIf(I1, ifStmt); RESULT.setLine(I1left); :}
            |
            (StmtIfError) IfInit:I1 LPAREN error RPAREN Statement:ifStmt {: RESULT=new StmtIfError(I1, ifStmt); RESULT.setLine(I1left); :}
            |
            (StmtDesign) DesignStatement:statement SEMI {: RESULT=new StmtDesign(statement); RESULT.setLine(statementleft); :}
            |
            (StmtDoWhile) DoStart:D1 Statement:S2 WHILE LPAREN Cond:C3 RPAREN SEMI {: RESULT=new StmtDoWhile(D1, S2, C3); RESULT.setLine(D1left); :}
            |
            (StmtBreak) BREAK SEMI {: RESULT=new StmtBreak(); :}
            |
            (StmtContinue) CONT SEMI {: RESULT=new StmtContinue(); :}
            |
            (StmtReturn) RETURN Expr:retValue SEMI {: RESULT=new StmtReturn(retValue); RESULT.setLine(retValueleft); :}
            |
            (StmtReturnVoid) RETURN SEMI {: RESULT=new StmtReturnVoid(); :}
            |
            (StmtRead) READ LPAREN Designator:dst RPAREN SEMI {: RESULT=new StmtRead(dst); RESULT.setLine(dstleft); :}
            |
            (StmtPrintSize) PRINT LPAREN Expr:src COMMA NUMBER:size RPAREN SEMI {: RESULT=new StmtPrintSize(src, size); RESULT.setLine(srcleft); :}
            |
            (StmtPrint) PRINT LPAREN Expr:src RPAREN:size SEMI {: RESULT=new StmtPrint(src); RESULT.setLine(srcleft); :}
            |
            (StmtGoto) GOTO Label:dst SEMI {: RESULT=new StmtGoto(dst); RESULT.setLine(dstleft); :}
            ;

DoStart ::= (DoStart) DO {: RESULT=new DoStart(); :};
Designator ::= (DesignatorAccessField) BaseDsgn:base DOT IDENT:field {: RESULT=new DesignatorAccessField(base, field); RESULT.setLine(baseleft); :}
              |
               (DesignatorAccessArray) BaseDsgn:base LBRACK Expr:index RBRACK {: RESULT=new DesignatorAccessArray(base, index); RESULT.setLine(baseleft); :}
              |
              (DesignatorFirst) IDENT:dsgnName {: RESULT=new DesignatorFirst(dsgnName); RESULT.setLine(dsgnNameleft); :}
              |
              (DesignatorThis) THIS:l {: RESULT=new DesignatorThis(); :}
              ;
BaseDsgn ::= (BaseDsgn)Designator:base {: RESULT=new BaseDsgn(base); RESULT.setLine(baseleft); :};
DesignStatement ::= (DsgnOpAssign) CallName:C1 Assignop:A2 Expr:E3 {: RESULT=new DsgnOpAssign(C1, A2, E3); RESULT.setLine(C1left); :}
            |
            (DsgnOpAssignError) CallName:C1 Assignop:r error {: RESULT=new DsgnOpAssignError(C1, r); RESULT.setLine(C1left); :}
            |
            (DsgnOpCallPars) CallName:C1 CopyDsgn:C2 LPAREN ActPars:params RPAREN {: RESULT=new DsgnOpCallPars(C1, C2, params); RESULT.setLine(C1left); :}
            |
            (DsgnOpCallEmpty) CallName:C1 CopyDsgn:C2 LPAREN RPAREN {: RESULT=new DsgnOpCallEmpty(C1, C2); RESULT.setLine(C1left); :}
            |
            (DsgnSuperPars) SuperDsgn:S1 CopyDsgn:C2 LPAREN ActPars:params RPAREN {: RESULT=new DsgnSuperPars(S1, C2, params); RESULT.setLine(S1left); :}
            |
            (DsgnSuperEmpty) SuperDsgn:S1 CopyDsgn:C2 LPAREN RPAREN {: RESULT=new DsgnSuperEmpty(S1, C2); RESULT.setLine(S1left); :}
            |
            (DsgnOpInc) CallName:C1 INC {: RESULT=new DsgnOpInc(C1); RESULT.setLine(C1left); :}
            |
            (DsgnOpDec) CallName:C1 DEC {: RESULT=new DsgnOpDec(C1); RESULT.setLine(C1left); :}
            ;
SuperDsgn ::= (SuperDsgn) SUPER {: RESULT=new SuperDsgn(); :};
CallName ::= (CallName) Designator:dsgn {: RESULT=new CallName(dsgn); RESULT.setLine(dsgnleft); :};
Assignop ::= (Assignop) EQUAL {: RESULT=new Assignop(); :};

ActPars ::= (ActParsMultiple) ActPars:params COMMA Expr:param {: RESULT=new ActParsMultiple(params, param); RESULT.setLine(paramsleft); :}
                |
                (ActParsSingle) Expr:param {: RESULT=new ActParsSingle(param); RESULT.setLine(paramleft); :}
                ;
Cond ::= (CondMultiple) Cond:conds CondOr:C1 CondTerm:cond {: RESULT=new CondMultiple(conds, C1, cond); RESULT.setLine(condsleft); :}
        |
        (CondSingle) CondTerm:cond {: RESULT=new CondSingle(cond); RESULT.setLine(condleft); :}
        ;
CondOr ::= (CondOr) OR {: RESULT=new CondOr(); :};
CondTerm ::= (CondTermMultiple) CondTerm:conds AND CondFact:cond {: RESULT=new CondTermMultiple(conds, cond); RESULT.setLine(condsleft); :}
            |
            (CondTermSingle) CondFact:cond {: RESULT=new CondTermSingle(cond); RESULT.setLine(condleft); :}
            ;
CondFact ::= (CondFactMultiple) Expr:op1 Relop:R1 Expr:op2 {: RESULT=new CondFactMultiple(op1, R1, op2); RESULT.setLine(op1left); :}
            |
            (CondFactMultipleEq) Expr:op1 RelopEq:R1 Expr:op2 {: RESULT=new CondFactMultipleEq(op1, R1, op2); RESULT.setLine(op1left); :}
            |
            (CondFactSingle) Expr:operand {: RESULT=new CondFactSingle(operand); RESULT.setLine(operandleft); :}
            ;
RelopEq ::= (RelopEqu) EQU:val {: RESULT=new RelopEqu(); :}
            | (RelopNeq) NEQ:val {: RESULT=new RelopNeq(); :}
            ;
Relop ::= (RelopGrt) GRT:val {: RESULT=new RelopGrt(); :}
        | (RelopGre) GRE:val {: RESULT=new RelopGre(); :}
        | (RelopLes) LES:val {: RESULT=new RelopLes(); :}
        | (RelopLee) LEE:val {: RESULT=new RelopLee(); :} ;
Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :}
        | (AddopMinus) MINUS {: RESULT=new AddopMinus(); :};
Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :}
        | (MulopDiv) DIV {: RESULT=new MulopDiv(); :}
        | (MulopMod) MOD {: RESULT=new MulopMod(); :};
Expr ::= (ExprMultiple) Expr:operands Addop:A1 Term:operand {: RESULT=new ExprMultiple(operands, A1, operand); RESULT.setLine(operandsleft); :}
        |
        (ExprSingle) Term:operand {: RESULT=new ExprSingle(operand); RESULT.setLine(operandleft); :}
        |
        (ExprSingleMinus) MINUS Term:operand {: RESULT=new ExprSingleMinus(operand); RESULT.setLine(operandleft); :}
        ;
Term ::= (TermMultiple) Term:operands Mulop:M1 Factor:operand {: RESULT=new TermMultiple(operands, M1, operand); RESULT.setLine(operandsleft); :}
        |
        (TermSingle) Factor:operand {: RESULT=new TermSingle(operand); RESULT.setLine(operandleft); :}
        ;
FactorDesignator ::= (FactorDesignator) Designator:operand {: RESULT=new FactorDesignator(operand); RESULT.setLine(operandleft); :};
CopyDsgn ::= (CopyDsgn) {: RESULT=new CopyDsgn(); :};

Factor ::= (FactorDsgn) FactorDesignator:operand {: RESULT=new FactorDsgn(operand); RESULT.setLine(operandleft); :}
        |
        (FactorDsgnCall) FactorDesignator:fun CopyDsgn:C1 LPAREN ActPars:params RPAREN {: RESULT=new FactorDsgnCall(fun, C1, params); RESULT.setLine(funleft); :}
        |
        (FactorDsgnCallEmpty) FactorDesignator:fun CopyDsgn:C1 LPAREN RPAREN {: RESULT=new FactorDsgnCallEmpty(fun, C1); RESULT.setLine(funleft); :}
        |
        (FactorDsgnSuper) SuperDsgn:fun CopyDsgn:C1 LPAREN ActPars:params RPAREN {: RESULT=new FactorDsgnSuper(fun, C1, params); RESULT.setLine(funleft); :}
        |
        (FactorDsgnSuperEmpty) SuperDsgn:fun CopyDsgn:C1 LPAREN RPAREN {: RESULT=new FactorDsgnSuperEmpty(fun, C1); RESULT.setLine(funleft); :}
        |
        (FactorNumber) NUMBER:operand {: RESULT=new FactorNumber(operand); RESULT.setLine(operandleft); :}
        |
        (FactorChar) CHAR:operand {: RESULT=new FactorChar(operand); RESULT.setLine(operandleft); :}
        |
        (FactorBool) BOOL:operand {: RESULT=new FactorBool(operand); RESULT.setLine(operandleft); :}
        |
        (FactorObject) NEW Type:objType {: RESULT=new FactorObject(objType); RESULT.setLine(objTypeleft); :}
        |
        (FactorArray) NEW Type:arrType LBRACK Expr:size RBRACK {: RESULT=new FactorArray(arrType, size); RESULT.setLine(arrTypeleft); :}
        |
        (FactorBlock) LPAREN Expr:operand RPAREN {: RESULT=new FactorBlock(operand); RESULT.setLine(operandleft); :}
        ;
Label ::= (Label) IDENT:labelName {: RESULT=new Label(labelName); RESULT.setLine(labelNameleft); :};






