
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Dec 22 12:56:05 CET 2021
//----------------------------------------------------

package compiler.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import compiler.pp1.ast.*;

/** CUP v0.10k generated parser.
  * @version Wed Dec 22 12:56:05 CET 2021
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\003\010\000\002\002\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\006\006\000\002\014\007\000" +
    "\002\014\005\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\013\003\000\002\007\005\000\002\016" +
    "\006\000\002\016\004\000\002\055\004\000\002\055\002" +
    "\000\002\010\011\000\002\017\004\000\002\017\002\000" +
    "\002\020\004\000\002\020\002\000\002\021\006\000\002" +
    "\021\005\000\002\021\002\000\002\011\007\000\002\022" +
    "\011\000\002\005\004\000\002\005\002\000\002\012\013" +
    "\000\002\012\012\000\002\024\003\000\002\024\003\000" +
    "\002\025\007\000\002\025\005\000\002\023\004\000\002" +
    "\023\002\000\002\026\003\000\002\026\005\000\002\026" +
    "\003\000\002\030\005\000\002\027\003\000\002\027\003" +
    "\000\002\032\007\000\002\032\011\000\002\031\011\000" +
    "\002\031\004\000\002\031\011\000\002\031\004\000\002" +
    "\031\004\000\002\031\005\000\002\031\007\000\002\031" +
    "\011\000\002\031\007\000\002\031\005\000\002\056\003" +
    "\000\002\056\003\000\002\033\004\000\002\035\004\000" +
    "\002\035\003\000\002\040\004\000\002\040\005\000\002" +
    "\037\004\000\002\037\005\000\002\037\004\000\002\037" +
    "\003\000\002\037\003\000\002\041\003\000\002\042\005" +
    "\000\002\042\003\000\002\044\005\000\002\044\003\000" +
    "\002\045\005\000\002\045\003\000\002\046\005\000\002" +
    "\046\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\052\003\000\002\052\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\034\005\000\002" +
    "\034\003\000\002\034\004\000\002\054\005\000\002\054" +
    "\003\000\002\053\003\000\002\053\006\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\004\000" +
    "\002\053\007\000\002\053\005\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\004\005\001\002\000\004\002\330\001" +
    "\002\000\004\030\006\001\002\000\014\005\ufffb\007\ufffb" +
    "\016\ufffb\017\ufffb\030\ufffb\001\002\000\014\005\011\007" +
    "\021\016\014\017\020\030\012\001\002\000\004\030\322" +
    "\001\002\000\010\006\uffe3\024\056\030\012\001\002\000" +
    "\052\005\ufff4\010\ufff4\011\ufff4\014\ufff4\015\ufff4\022\ufff4" +
    "\030\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\060\ufff4\001\002\000\014\005\ufffc\007\ufffc\016\ufffc\017" +
    "\ufffc\030\ufffc\001\002\000\004\030\313\001\002\000\014" +
    "\005\ufffe\007\ufffe\016\ufffe\017\ufffe\030\ufffe\001\002\000" +
    "\014\005\ufffd\007\ufffd\016\ufffd\017\ufffd\030\ufffd\001\002" +
    "\000\014\005\uffff\007\uffff\016\uffff\017\uffff\030\uffff\001" +
    "\002\000\004\030\037\001\002\000\004\030\012\001\002" +
    "\000\004\030\024\001\002\000\006\010\033\011\032\001" +
    "\002\000\004\013\025\001\002\000\010\026\027\027\030" +
    "\031\031\001\002\000\006\010\ufff8\011\ufff8\001\002\000" +
    "\006\010\ufff7\011\ufff7\001\002\000\006\010\ufff6\011\ufff6" +
    "\001\002\000\006\010\ufff5\011\ufff5\001\002\000\004\030" +
    "\034\001\002\000\014\005\ufffa\007\ufffa\016\ufffa\017\ufffa" +
    "\030\ufffa\001\002\000\004\013\035\001\002\000\010\026" +
    "\027\027\030\031\031\001\002\000\006\010\ufff9\011\ufff9" +
    "\001\002\000\006\005\uffec\020\041\001\002\000\004\005" +
    "\043\001\002\000\004\030\012\001\002\000\004\005\uffed" +
    "\001\002\000\010\005\uffea\006\uffea\030\uffea\001\002\000" +
    "\010\005\046\006\uffe7\030\012\001\002\000\004\006\312" +
    "\001\002\000\010\006\uffe3\024\056\030\055\001\002\000" +
    "\010\005\uffeb\006\uffeb\030\uffeb\001\002\000\004\030\uffe0" +
    "\001\002\000\004\006\311\001\002\000\010\006\uffe3\024" +
    "\056\030\012\001\002\000\004\030\261\001\002\000\010" +
    "\006\uffe3\024\056\030\012\001\002\000\006\021\057\030" +
    "\ufff4\001\002\000\004\030\uffdf\001\002\000\004\022\060" +
    "\001\002\000\006\005\uffea\030\uffea\001\002\000\006\005" +
    "\062\030\012\001\002\000\030\005\uffdb\006\uffdb\030\uffdb" +
    "\032\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\001\002\000\030\005\075\006\067\030\066" +
    "\032\074\034\071\035\077\037\101\040\076\041\073\042" +
    "\065\043\104\001\002\000\016\013\250\014\137\021\253" +
    "\023\141\061\251\062\252\001\002\000\004\021\242\001" +
    "\002\000\020\012\uff9b\013\uffc4\014\uffc4\021\uffc4\023\uffc4" +
    "\061\uffc4\062\uffc4\001\002\000\010\006\uffe5\024\uffe5\030" +
    "\uffe5\001\002\000\004\010\241\001\002\000\004\030\236" +
    "\001\002\000\032\005\uffd8\006\uffd8\030\uffd8\032\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\001\002\000\020\021\121\025\114\026\116\027" +
    "\112\030\111\031\122\060\110\001\002\000\004\021\220" +
    "\001\002\000\030\005\uffdb\006\uffdb\030\uffdb\032\uffdb\034" +
    "\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\001\002\000\004\010\215\001\002\000\026\005\075\030" +
    "\066\032\074\034\071\035\077\037\101\040\076\041\073" +
    "\042\065\043\104\001\002\000\032\005\uffda\006\uffda\030" +
    "\uffda\032\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\043\uffda\001\002\000\004\010\167\001" +
    "\002\000\004\012\165\001\002\000\032\005\uffd5\006\uffd5" +
    "\030\uffd5\032\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\001\002\000\004\021\107" +
    "\001\002\000\030\005\uffdc\006\uffdc\030\uffdc\032\uffdc\034" +
    "\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\001\002\000\032\005\uffd6\006\uffd6\030\uffd6\032\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6" +
    "\043\uffd6\001\002\000\020\021\121\025\114\026\116\027" +
    "\112\030\111\031\122\060\110\001\002\000\016\021\121" +
    "\025\114\026\116\027\112\030\111\031\122\001\002\000" +
    "\060\010\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\001\002\000\044\010" +
    "\uff9f\011\uff9f\015\uff9f\022\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\060\uff9f\001\002\000\012\011\156" +
    "\022\157\057\125\060\126\001\002\000\004\030\012\001" +
    "\002\000\052\010\uffa3\011\uffa3\014\137\015\uffa3\021\140" +
    "\022\uffa3\023\141\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3" +
    "\057\uffa3\060\uffa3\001\002\000\044\010\uffa1\011\uffa1\015" +
    "\uffa1\022\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057" +
    "\uffa1\060\uffa1\001\002\000\044\010\uffa7\011\uffa7\015\uffa7" +
    "\022\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\132\055\133\056\131\057\uffa7" +
    "\060\uffa7\001\002\000\044\010\uffa4\011\uffa4\015\uffa4\022" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\001\002\000\020\021\121\025\114\026\116\027\112" +
    "\030\111\031\122\060\110\001\002\000\044\010\uffa0\011" +
    "\uffa0\015\uffa0\022\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056" +
    "\uffa0\057\uffa0\060\uffa0\001\002\000\010\022\124\057\125" +
    "\060\126\001\002\000\044\010\uff9c\011\uff9c\015\uff9c\022" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\001\002\000\016\021\uffad\025\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\001\002\000\016\021\uffac\025\uffac\026" +
    "\uffac\027\uffac\030\uffac\031\uffac\001\002\000\016\021\121" +
    "\025\114\026\116\027\112\030\111\031\122\001\002\000" +
    "\044\010\uffa8\011\uffa8\015\uffa8\022\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
    "\132\055\133\056\131\057\uffa8\060\uffa8\001\002\000\016" +
    "\021\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\001" +
    "\002\000\016\021\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\001\002\000\016\021\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\001\002\000\016\021\121\025\114" +
    "\026\116\027\112\030\111\031\122\001\002\000\044\010" +
    "\uffa5\011\uffa5\015\uffa5\022\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055" +
    "\uffa5\056\uffa5\057\uffa5\060\uffa5\001\002\000\060\010\uffc5" +
    "\011\uffc5\013\uffc5\014\uffc5\015\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\061\uffc5\062\uffc5\001\002\000\020\021\121\025\114" +
    "\026\116\027\112\030\111\031\122\060\110\001\002\000" +
    "\020\021\121\025\114\026\116\027\112\030\111\031\122" +
    "\060\110\001\002\000\004\030\142\001\002\000\060\010" +
    "\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\062\uffc3\001\002\000\012\011\uffba\022" +
    "\uffba\057\125\060\126\001\002\000\006\011\145\022\146" +
    "\001\002\000\020\021\121\025\114\026\116\027\112\030" +
    "\111\031\122\060\110\001\002\000\044\010\uffa2\011\uffa2" +
    "\015\uffa2\022\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\001\002\000\012\011\uffbb\022\uffbb\057" +
    "\125\060\126\001\002\000\010\015\151\057\125\060\126" +
    "\001\002\000\060\010\uffc2\011\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002" +
    "\000\046\010\uff9e\011\uff9e\014\153\015\uff9e\022\uff9e\044" +
    "\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\001" +
    "\002\000\020\021\121\025\114\026\116\027\112\030\111" +
    "\031\122\060\110\001\002\000\010\015\155\057\125\060" +
    "\126\001\002\000\044\010\uff9d\011\uff9d\015\uff9d\022\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052" +
    "\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d" +
    "\001\002\000\004\026\161\001\002\000\004\010\160\001" +
    "\002\000\034\005\uffca\006\uffca\030\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\001\002\000\004\022\162\001\002\000\004" +
    "\010\163\001\002\000\034\005\uffcb\006\uffcb\030\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\001\002\000\044\010\uffa6\011" +
    "\uffa6\015\uffa6\022\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\132\055\133\056" +
    "\131\057\uffa6\060\uffa6\001\002\000\024\030\111\032\074" +
    "\034\071\035\077\037\101\040\076\041\073\042\065\043" +
    "\104\001\002\000\032\005\uffd9\006\uffd9\030\uffd9\032\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\001\002\000\034\005\uffcf\006\uffcf\030\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\001\002\000\004\036\171" +
    "\001\002\000\004\021\172\001\002\000\020\021\121\025" +
    "\114\026\116\027\112\030\111\031\122\060\110\001\002" +
    "\000\006\022\211\053\212\001\002\000\030\022\uffb4\044" +
    "\201\045\203\046\202\047\206\050\207\051\205\052\uffb4" +
    "\053\uffb4\057\125\060\126\001\002\000\010\022\uffb6\052" +
    "\uffb6\053\uffb6\001\002\000\010\022\uffb8\052\177\053\uffb8" +
    "\001\002\000\020\021\121\025\114\026\116\027\112\030" +
    "\111\031\122\060\110\001\002\000\010\022\uffb7\052\uffb7" +
    "\053\uffb7\001\002\000\020\021\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\060\uffb3\001\002\000\020\021\uffb1" +
    "\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\060\uffb1\001" +
    "\002\000\020\021\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\060\uffb2\001\002\000\020\021\121\025\114\026" +
    "\116\027\112\030\111\031\122\060\110\001\002\000\020" +
    "\021\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\060" +
    "\uffae\001\002\000\020\021\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\060\uffb0\001\002\000\020\021\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\060\uffaf\001\002" +
    "\000\014\022\uffb5\052\uffb5\053\uffb5\057\125\060\126\001" +
    "\002\000\004\010\214\001\002\000\020\021\121\025\114" +
    "\026\116\027\112\030\111\031\122\060\110\001\002\000" +
    "\010\022\uffb9\052\177\053\uffb9\001\002\000\034\005\uffd0" +
    "\006\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\001\002" +
    "\000\034\005\uffce\006\uffce\030\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\001\002\000\030\005\075\006\217\030\066\032" +
    "\074\034\071\035\077\037\101\040\076\041\073\042\065" +
    "\043\104\001\002\000\034\005\uffd7\006\uffd7\030\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\001\002\000\020\021\121\025" +
    "\114\026\116\027\112\030\111\031\122\060\110\001\002" +
    "\000\006\022\222\053\212\001\002\000\026\005\075\030" +
    "\066\032\074\034\071\035\077\037\101\040\076\041\073" +
    "\042\065\043\104\001\002\000\004\033\227\001\002\000" +
    "\034\005\uffd8\006\uffd8\030\uffd8\032\uffd8\033\uffc7\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\001\002\000\032\005\uffd4\006\uffd4\030\uffd4\032\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\001\002\000\034\005\uffd6\006\uffd6\030\uffd6" +
    "\032\uffd6\033\uffc8\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\001\002\000\026\005\075" +
    "\030\111\032\074\034\071\035\077\037\101\040\076\041" +
    "\073\042\065\043\104\001\002\000\032\005\uffd3\006\uffd3" +
    "\030\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\001\002\000\034\005\uffc7" +
    "\006\uffc7\030\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\001\002" +
    "\000\034\005\uffc8\006\uffc8\030\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\001\002\000\034\005\uffd2\006\uffd2\030\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\001\002\000\010\010\235\057" +
    "\125\060\126\001\002\000\034\005\uffcd\006\uffcd\030\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\001\002\000\004\010\uff9b" +
    "\001\002\000\004\010\240\001\002\000\034\005\uffc9\006" +
    "\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\001\002\000" +
    "\034\005\uffd1\006\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\001\002\000\004\030\111\001\002\000\010\014\137" +
    "\022\244\023\141\001\002\000\004\010\245\001\002\000" +
    "\034\005\uffcc\006\uffcc\030\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\001\002\000\020\021\121\025\114\026\116\027\112" +
    "\030\111\031\122\060\110\001\002\000\004\010\uffc6\001" +
    "\002\000\020\021\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\031\uffbc\060\uffbc\001\002\000\004\010\uffbe\001\002\000" +
    "\004\010\uffbd\001\002\000\022\021\121\022\255\025\114" +
    "\026\116\027\112\030\111\031\122\060\110\001\002\000" +
    "\006\011\145\022\256\001\002\000\004\010\uffbf\001\002" +
    "\000\004\010\uffc0\001\002\000\010\010\uffc1\057\125\060" +
    "\126\001\002\000\004\006\uffe4\001\002\000\004\021\262" +
    "\001\002\000\006\022\265\030\012\001\002\000\006\011" +
    "\276\022\277\001\002\000\004\030\272\001\002\000\006" +
    "\005\uffea\030\uffea\001\002\000\006\005\267\030\012\001" +
    "\002\000\030\005\uffdb\006\uffdb\030\uffdb\032\uffdb\034\uffdb" +
    "\035\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\001" +
    "\002\000\030\005\075\006\271\030\066\032\074\034\071" +
    "\035\077\037\101\040\076\041\073\042\065\043\104\001" +
    "\002\000\010\006\uffe1\024\uffe1\030\uffe1\001\002\000\010" +
    "\011\uffef\014\274\022\uffef\001\002\000\006\011\uffdd\022" +
    "\uffdd\001\002\000\004\015\275\001\002\000\010\010\ufff0" +
    "\011\ufff0\022\ufff0\001\002\000\004\030\012\001\002\000" +
    "\006\005\uffea\030\uffea\001\002\000\006\005\301\030\012" +
    "\001\002\000\030\005\uffdb\006\uffdb\030\uffdb\032\uffdb\034" +
    "\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb" +
    "\001\002\000\030\005\075\006\303\030\066\032\074\034" +
    "\071\035\077\037\101\040\076\041\073\042\065\043\104" +
    "\001\002\000\010\006\uffe2\024\uffe2\030\uffe2\001\002\000" +
    "\004\030\305\001\002\000\010\011\uffef\014\274\022\uffef" +
    "\001\002\000\006\011\uffde\022\uffde\001\002\000\004\006" +
    "\310\001\002\000\004\006\uffe9\001\002\000\004\006\uffe8" +
    "\001\002\000\014\005\uffee\007\uffee\016\uffee\017\uffee\030" +
    "\uffee\001\002\000\004\005\314\001\002\000\006\006\uffea" +
    "\030\uffea\001\002\000\006\006\316\030\012\001\002\000" +
    "\014\005\uffe6\007\uffe6\016\uffe6\017\uffe6\030\uffe6\001\002" +
    "\000\004\006\320\001\002\000\004\002\001\001\002\000" +
    "\006\010\325\011\324\001\002\000\010\010\uffef\011\uffef" +
    "\014\274\001\002\000\006\010\ufff1\011\ufff1\001\002\000" +
    "\004\030\326\001\002\000\016\005\ufff3\006\ufff3\007\ufff3" +
    "\016\ufff3\017\ufff3\030\ufff3\001\002\000\010\010\uffef\011" +
    "\uffef\014\274\001\002\000\006\010\ufff2\011\ufff2\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\006\001\001\000\014\006\016" +
    "\007\014\010\015\011\012\013\007\001\001\000\004\016" +
    "\320\001\001\000\012\005\316\012\053\013\047\024\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\021\001\001\000\004\014" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\035\001\001\000" +
    "\002\001\001\000\004\017\037\001\001\000\002\001\001" +
    "\000\004\013\041\001\001\000\002\001\001\000\004\020" +
    "\043\001\001\000\010\007\046\013\007\021\044\001\001" +
    "\000\002\001\001\000\014\005\050\012\053\013\047\022" +
    "\051\024\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\306\012\053\013\047\024" +
    "\052\001\001\000\002\001\001\000\012\005\257\012\053" +
    "\013\047\024\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\060\001\001\000\006" +
    "\007\046\013\007\001\001\000\004\023\062\001\001\000" +
    "\022\026\104\027\077\030\071\031\105\032\102\033\067" +
    "\035\063\050\101\001\001\000\010\037\246\040\135\041" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\236\001\001\000" +
    "\002\001\001\000\012\034\233\035\114\053\117\054\116" +
    "\001\001\000\002\001\001\000\004\023\215\001\001\000" +
    "\002\001\001\000\022\026\167\027\077\030\071\031\105" +
    "\032\102\033\067\035\063\050\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\112\035\114\053\117\054\116\001\001\000\010" +
    "\035\114\053\117\054\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\126\001\001\000\004\013\151" +
    "\001\001\000\004\040\135\001\001\000\002\001\001\000" +
    "\004\051\133\001\001\000\002\001\001\000\012\034\122" +
    "\035\114\053\117\054\116\001\001\000\002\001\001\000" +
    "\004\052\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\114\053\117\054\127\001" +
    "\001\000\004\051\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\114\053\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\034\147" +
    "\035\114\053\117\054\116\001\001\000\014\034\142\035" +
    "\114\042\143\053\117\054\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\126\001\001\000\002\001" +
    "\001\000\012\034\146\035\114\053\117\054\116\001\001" +
    "\000\002\001\001\000\004\052\126\001\001\000\004\052" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\034\153\035\114\053\117\054\116\001\001\000\004\052" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\133\001\001\000\014" +
    "\027\165\031\105\032\102\033\067\035\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\034\173\035\114\044\172\045\175\046" +
    "\174\053\117\054\116\001\001\000\002\001\001\000\006" +
    "\047\203\052\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\173\035\114\046\177\053\117\054\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\034\207\035\114\053\117" +
    "\054\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\126\001\001\000\002\001\001" +
    "\000\016\034\173\035\114\045\212\046\174\053\117\054" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\026\104\027\077\030\071\031\105\032" +
    "\102\033\067\035\063\050\101\001\001\000\002\001\001" +
    "\000\020\034\173\035\114\044\220\045\175\046\174\053" +
    "\117\054\116\001\001\000\002\001\001\000\024\026\224" +
    "\027\077\030\223\031\225\032\102\033\067\035\063\050" +
    "\101\056\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\030\230\031" +
    "\231\032\227\033\067\035\063\056\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\242\001\001\000\004\040\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\034\256\035" +
    "\114\053\117\054\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\142\035\114\042\253\053\117\054\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\263\025\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\265\001\001\000\006\007\046\013\007" +
    "\001\001\000\004\023\267\001\001\000\022\026\104\027" +
    "\077\030\071\031\105\032\102\033\067\035\063\050\101" +
    "\001\001\000\002\001\001\000\004\055\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\303\001\001\000\004\020\277\001\001\000\006\007" +
    "\046\013\007\001\001\000\004\023\301\001\001\000\022" +
    "\026\104\027\077\030\071\031\105\032\102\033\067\035" +
    "\063\050\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\314\001\001\000\006\007" +
    "\046\013\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\326\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }



	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     //ne mozemo da nsatavimo parsiranje
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

  //prijava greske kad moze da se oporavi od greske
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

  //ako oporavak nije moguc
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

//string builder koristimo za gresku
    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left); //left - sadrzi broj linije
        log.error(msg.toString());
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Label ::= IDENT 
            {
              Label RESULT = null;
		int labelNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int labelNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String labelName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Label(labelName); RESULT.setLine(labelNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Label*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr operand = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorBlock(operand); RESULT.setLine(operandleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Factor ::= NEW Type LBRACK Expr RBRACK 
            {
              Factor RESULT = null;
		int arrTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int arrTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type arrType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr size = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorArray(arrType, size); RESULT.setLine(arrTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Factor ::= NEW Type 
            {
              Factor RESULT = null;
		int objTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int objTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type objType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorObject(objType); RESULT.setLine(objTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Factor ::= BOOL 
            {
              Factor RESULT = null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer operand = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorBool(operand); RESULT.setLine(operandleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Factor ::= CHAR 
            {
              Factor RESULT = null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String operand = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorChar(operand); RESULT.setLine(operandleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Factor ::= NUMBER 
            {
              Factor RESULT = null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer operand = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorNumber(operand); RESULT.setLine(operandleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Factor ::= Designator LPAREN ActPars RPAREN 
            {
              Factor RESULT = null;
		int funleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator fun = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars params = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new FactorDsgnCall(fun, params); RESULT.setLine(funleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator operand = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FactorDsgn(operand); RESULT.setLine(operandleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Term ::= Factor 
            {
              Term RESULT = null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor operand = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermSingle(operand); RESULT.setLine(operandleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Term ::= Term Mulop Factor 
            {
              Term RESULT = null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Term operands = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop M1 = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor operand = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new TermMultiple(operands, M1, operand); RESULT.setLine(operandsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= MINUS Term 
            {
              Expr RESULT = null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term operand = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprSingleMinus(operand); RESULT.setLine(operandleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Term 
            {
              Expr RESULT = null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term operand = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprSingle(operand); RESULT.setLine(operandleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr Addop Term 
            {
              Expr RESULT = null;
		int operandsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int operandsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr operands = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A1 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term operand = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExprMultiple(operands, A1, operand); RESULT.setLine(operandsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new MulopMod(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new MulopDiv(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Mulop ::= MUL 
            {
              Mulop RESULT = null;
		 RESULT=new MulopMul(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new AddopMinus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new AddopPlus(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Relop ::= LEE 
            {
              Relop RESULT = null;
		 RESULT=new RelopLee(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Relop ::= LES 
            {
              Relop RESULT = null;
		 RESULT=new RelopLes(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Relop ::= GRE 
            {
              Relop RESULT = null;
		 RESULT=new RelopGre(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Relop ::= GRT 
            {
              Relop RESULT = null;
		 RESULT=new RelopGrt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Relop ::= NEQ 
            {
              Relop RESULT = null;
		 RESULT=new RelopNeq(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Relop ::= EQU 
            {
              Relop RESULT = null;
		 RESULT=new RelopEqu(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CondFact ::= Expr 
            {
              CondFact RESULT = null;
		int operandleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr operand = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactSingle(operand); RESULT.setLine(operandleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int op1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr op1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R1 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr op2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondFactMultiple(op1, R1, op2); RESULT.setLine(op1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CondTerm ::= CondFact 
            {
              CondTerm RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact cond = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermSingle(cond); RESULT.setLine(condleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CondTerm ::= CondTerm AND CondFact 
            {
              CondTerm RESULT = null;
		int condsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTerm conds = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact cond = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondTermMultiple(conds, cond); RESULT.setLine(condsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Cond ::= CondTerm 
            {
              Cond RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm cond = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondSingle(cond); RESULT.setLine(condleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Cond*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Cond ::= Cond OR CondTerm 
            {
              Cond RESULT = null;
		int condsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int condsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Cond conds = (Cond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm cond = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new CondMultiple(conds, cond); RESULT.setLine(condsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*Cond*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ActPars ::= Expr 
            {
              ActPars RESULT = null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr param = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsSingle(param); RESULT.setLine(paramleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ActPars ::= ActPars COMMA Expr 
            {
              ActPars RESULT = null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActPars params = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr param = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ActParsMultiple(params, param); RESULT.setLine(paramsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*ActPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Assignop ::= EQUAL 
            {
              Assignop RESULT = null;
		 RESULT=new Assignop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*Assignop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DsgnOp ::= DEC 
            {
              DsgnOp RESULT = null;
		 RESULT=new DsgnOpDec(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*DsgnOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DsgnOp ::= INC 
            {
              DsgnOp RESULT = null;
		 RESULT=new DsgnOpInc(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*DsgnOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DsgnOp ::= LPAREN RPAREN 
            {
              DsgnOp RESULT = null;
		 RESULT=new DsgnOpCallEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*DsgnOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DsgnOp ::= LPAREN ActPars RPAREN 
            {
              DsgnOp RESULT = null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActPars params = (ActPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DsgnOpCallPars(params); RESULT.setLine(paramsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*DsgnOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DsgnOp ::= Assignop Expr 
            {
              DsgnOp RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Assignop A1 = (Assignop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DsgnOpAssign(A1, E2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*DsgnOp*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AccessDsgn ::= LBRACK Expr RBRACK 
            {
              AccessDsgn RESULT = null;
		int indexleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr index = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AccessDsgnArray(index); RESULT.setLine(indexleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*AccessDsgn*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AccessDsgn ::= DOT IDENT 
            {
              AccessDsgn RESULT = null;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AccessDsgnField(field); RESULT.setLine(fieldleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*AccessDsgn*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Designator ::= IDENT 
            {
              Designator RESULT = null;
		int dsgnNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dsgnNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String dsgnName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorFirst(dsgnName); RESULT.setLine(dsgnNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Designator ::= Designator AccessDsgn 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int accessleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int accessright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		AccessDsgn access = (AccessDsgn)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignatorAccess(D1, access); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DesignStatement ::= Designator DsgnOp 
            {
              DesignStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int operationleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int operationright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		DsgnOp operation = (DsgnOp)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DesignStmt(D1, operation); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*DesignStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IfElseBlock ::= Statements 
            {
              IfElseBlock RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statements S1 = (Statements)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfElseBlockMultiple(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*IfElseBlock*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IfElseBlock ::= Matched 
            {
              IfElseBlock RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched M1 = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new IfElseBlockSingle(M1); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*IfElseBlock*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Matched ::= GOTO Label SEMI 
            {
              Matched RESULT = null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Label dst = (Label)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MatchedGoto(dst); RESULT.setLine(dstleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Matched RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr src = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MatchedPrint(src); RESULT.setLine(srcleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Matched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Matched RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Expr src = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new MatchedPrintSize(src, size); RESULT.setLine(srcleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Matched RESULT = null;
		int dstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator dst = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new MatchedRead(dst); RESULT.setLine(dstleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Matched ::= RETURN Expr SEMI 
            {
              Matched RESULT = null;
		int retValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr retValue = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MatchedReturn(retValue); RESULT.setLine(retValueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Matched ::= CONT SEMI 
            {
              Matched RESULT = null;
		 RESULT=new MatchedContinue(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Matched ::= BREAK SEMI 
            {
              Matched RESULT = null;
		 RESULT=new MatchedBreak(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Matched ::= DO Statement WHILE LPAREN Cond RPAREN SEMI 
            {
              Matched RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Statement S1 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Cond C2 = (Cond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new MatchedDoWhile(S1, C2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Matched ::= DesignStatement SEMI 
            {
              Matched RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignStatement statement = (DesignStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MatchedDesign(statement); RESULT.setLine(statementleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Matched ::= IF LPAREN Cond RPAREN IfElseBlock ELSE IfElseBlock 
            {
              Matched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Cond C1 = (Cond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int ifStmtleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ifStmtright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		IfElseBlock ifStmt = (IfElseBlock)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int elseStmtleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int elseStmtright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		IfElseBlock elseStmt = (IfElseBlock)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MatchedIfElse(C1, ifStmt, elseStmt); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(23/*Matched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Unmatched ::= IF LPAREN Cond RPAREN IfElseBlock ELSE Unmatched 
            {
              Unmatched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Cond C1 = (Cond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int ifStmtleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int ifStmtright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		IfElseBlock ifStmt = (IfElseBlock)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int elseStmtleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int elseStmtright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched elseStmt = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIfElse(C1, ifStmt, elseStmt); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Unmatched ::= IF LPAREN Cond RPAREN Statement 
            {
              Unmatched RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Cond C1 = (Cond)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new UnmatchedIf(C1, S2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*Unmatched*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SingleStatement ::= Unmatched 
            {
              SingleStatement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Unmatched statement = (Unmatched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementUnmatched(statement); RESULT.setLine(statementleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SingleStatement ::= Matched 
            {
              SingleStatement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Matched statement = (Matched)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementMatched(statement); RESULT.setLine(statementleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*SingleStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Statements ::= LBRACE StatementList RBRACE 
            {
              Statements RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new StatementsBlock(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*Statements*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Statement ::= Statements 
            {
              Statement RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statements S1 = (Statements)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementMultiple(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Statement ::= Label COLUMN SingleStatement 
            {
              Statement RESULT = null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Label label = (Label)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleStatement statement = (SingleStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementSingleLabel(label, statement); RESULT.setLine(labelleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= SingleStatement 
            {
              Statement RESULT = null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SingleStatement statement = (SingleStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementSingle(statement); RESULT.setLine(statementleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new StatementsEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList statements = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S1 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new StatementsList(statements, S1); RESULT.setLine(statementsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormParList ::= Type IDENT ArrayBracks 
            {
              FormParList RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int parNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int parNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String parName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ArrayBracks A1 = (ArrayBracks)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsSingle(type, parName, A1); RESULT.setLine(typeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*FormParList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormParList ::= FormParList COMMA Type IDENT ArrayBracks 
            {
              FormParList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		FormParList F1 = (FormParList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type type = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int parNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int parNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String parName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ArrayBracks A2 = (ArrayBracks)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new FormParsMultiple(F1, type, parName, A2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*FormParList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RetType ::= VOID 
            {
              RetType RESULT = null;
		 RESULT=new RetTypeVoid(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*RetType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RetType ::= Type 
            {
              RetType RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new RetTypeType(T1); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*RetType*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDecl ::= RetType IDENT LPAREN RPAREN InnerVarDeclList LBRACE StatementList RBRACE 
            {
              MethodDecl RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		RetType R1 = (RetType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		InnerVarDeclList vars = (InnerVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList statements = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclNoPar(R1, methodName, vars, statements); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodDecl ::= RetType IDENT LPAREN FormParList RPAREN InnerVarDeclList LBRACE StatementList RBRACE 
            {
              MethodDecl RESULT = null;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		RetType R1 = (RetType)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		FormParList params = (FormParList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		InnerVarDeclList vars = (InnerVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList statements = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new MethodDeclPar(R1, methodName, params, vars, statements); RESULT.setLine(R1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;
		 RESULT=new MethodDeclsEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDeclList ::= MethodDecl MethodDeclList 
            {
              MethodDeclList RESULT = null;
		int methodleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int methodright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDecl method = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new MethodDecls(method, M1); RESULT.setLine(methodleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ConstructorDecl ::= IDENT LPAREN RPAREN InnerVarDeclList LBRACE StatementList RBRACE 
            {
              ConstructorDecl RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		InnerVarDeclList vars = (InnerVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList statements = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ConstructorDecl(I1, vars, statements); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*ConstructorDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RecordDecl ::= RECORD IDENT LBRACE InnerVarDeclList RBRACE 
            {
              RecordDecl RESULT = null;
		int recordNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int recordNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String recordName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		InnerVarDeclList vars = (InnerVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new RecordDecl(recordName, vars); RESULT.setLine(recordNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*RecordDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // InnerMethodBlock ::= 
            {
              InnerMethodBlock RESULT = null;
		 RESULT=new InnerMethodBlockEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*InnerMethodBlock*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // InnerMethodBlock ::= LBRACE MethodDeclList RBRACE 
            {
              InnerMethodBlock RESULT = null;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList methods = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new InnerMethodBlockNoConstr(methods); RESULT.setLine(methodsleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*InnerMethodBlock*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InnerMethodBlock ::= LBRACE ConstructorDecl MethodDeclList RBRACE 
            {
              InnerMethodBlock RESULT = null;
		int constructorleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constructorright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ConstructorDecl constructor = (ConstructorDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList methods = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new InnerMethodBlockAll(constructor, methods); RESULT.setLine(constructorleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*InnerMethodBlock*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InnerVarDeclList ::= 
            {
              InnerVarDeclList RESULT = null;
		 RESULT=new InnerVarDeclsEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*InnerVarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InnerVarDeclList ::= InnerVarDeclList VarDecl 
            {
              InnerVarDeclList RESULT = null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		InnerVarDeclList varList = (InnerVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new InnerVarDecls(varList, var); RESULT.setLine(varListleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*InnerVarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ExtendsDecl ::= 
            {
              ExtendsDecl RESULT = null;
		 RESULT=new ExtendsDeclEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*ExtendsDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ExtendsDecl ::= EXTND Type 
            {
              ExtendsDecl RESULT = null;
		int baseleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Type base = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ExtendsDeclType(base); RESULT.setLine(baseleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*ExtendsDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ClassDecl ::= CLASS IDENT ExtendsDecl LBRACE InnerVarDeclList InnerMethodBlock RBRACE 
            {
              ClassDecl RESULT = null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ExtendsDecl E1 = (ExtendsDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		InnerVarDeclList vars = (InnerVarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		InnerMethodBlock methods = (InnerMethodBlock)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new ClassDecl(className, E1, vars, methods); RESULT.setLine(classNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ClassDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ArrayBracks ::= 
            {
              ArrayBracks RESULT = null;
		 RESULT=new BracksEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*ArrayBracks*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ArrayBracks ::= LBRACK RBRACK 
            {
              ArrayBracks RESULT = null;
		 RESULT=new Bracks(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*ArrayBracks*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclList ::= IDENT ArrayBracks 
            {
              VarDeclList RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ArrayBracks A1 = (ArrayBracks)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclSingle(varName, A1); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDeclList ::= VarDeclList COMMA IDENT ArrayBracks 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ArrayBracks A2 = (ArrayBracks)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new VarDeclMultiple(V1, varName, A2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= Type VarDeclList SEMI 
            {
              VarDecl RESULT = null;
		int varsTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varsTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type varsType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclList decls = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new VarDecl(varsType, decls); RESULT.setLine(varsTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new Type(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstLit ::= CHAR 
            {
              ConstLit RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstLitChar(value); RESULT.setLine(valueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ConstLit*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstLit ::= BOOL 
            {
              ConstLit RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstLitBool(value); RESULT.setLine(valueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ConstLit*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstLit ::= NUMBER 
            {
              ConstLit RESULT = null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstLitNum(value); RESULT.setLine(valueleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*ConstLit*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDeclList ::= IDENT EQUAL ConstLit 
            {
              ConstDeclList RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int varValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstLit varValue = (ConstLit)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclSingle(varName, varValue); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ConstDeclList ::= ConstDeclList COMMA IDENT EQUAL ConstLit 
            {
              ConstDeclList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ConstDeclList C1 = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int varValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstLit varValue = (ConstLit)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new ConstDeclMultiple(C1, varName, varValue); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*ConstDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ConstDecl ::= CONST Type ConstDeclList SEMI 
            {
              ConstDecl RESULT = null;
		int varsTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varsTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Type varsType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ConstDeclList decls = (ConstDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new DeclConst(varsType, decls); RESULT.setLine(varsTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= 
            {
              DeclList RESULT = null;
		 RESULT=new DeclListEmpty(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclList ::= DeclList RecordDecl 
            {
              DeclList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int R2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int R2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		RecordDecl R2 = (RecordDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclListRecord(D1, R2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= DeclList ClassDecl 
            {
              DeclList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ClassDecl C2 = (ClassDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclListClass(D1, C2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= DeclList VarDecl 
            {
              DeclList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclListVar(D1, V2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= DeclList ConstDecl 
            {
              DeclList RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DeclList D1 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ConstDecl C2 = (ConstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new DeclListConst(D1, C2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*DeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG IDENT DeclList LBRACE MethodDeclList RBRACE 
            {
              Program RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String I1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DeclList D2 = (DeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int M3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M3 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new Program(I1, D2, M3); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

