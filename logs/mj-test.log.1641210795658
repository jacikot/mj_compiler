INFO  12:51:48,469 - Compiling source file: D:\4.godina\pp\pp_projekat\workspace\mj_compiler\test\program_original.mj
INFO  12:51:48,579 - #2 program
INFO  12:51:48,580 - #22 p
INFO  12:51:48,580 - #5 const
INFO  12:51:48,582 - #22 int
INFO  12:51:48,582 - #22 size
INFO  12:51:48,583 - #9 =
INFO  12:51:48,584 - #20 10
INFO  12:51:48,584 - #7 ,
INFO  12:51:48,584 - #22 jaab
INFO  12:51:48,584 - #9 =
INFO  12:51:48,584 - #20 0
INFO  12:51:48,585 - #7 ,
INFO  12:51:48,585 - #22 xx
INFO  12:51:48,585 - #9 =
INFO  12:51:48,585 - #20 5
INFO  12:51:48,585 - #6 ;
INFO  12:51:48,585 - #5 const
INFO  12:51:48,586 - #22 char
INFO  12:51:48,586 - #22 variable
INFO  12:51:48,586 - #9 =
INFO  12:51:48,586 - #23 'p'
INFO  12:51:48,588 - #6 ;
INFO  12:51:48,588 - #5 const
INFO  12:51:48,589 - #22 bool
INFO  12:51:48,589 - #22 xyz
INFO  12:51:48,589 - #9 =
INFO  12:51:48,589 - #21 0
INFO  12:51:48,589 - #6 ;
INFO  12:51:48,589 - #22 int
INFO  12:51:48,589 - #22 xyza
INFO  12:51:48,589 - #7 ,
INFO  12:51:48,590 - #22 jana2
INFO  12:51:48,590 - #10 [
INFO  12:51:48,590 - #11 ]
INFO  12:51:48,590 - #6 ;
INFO  12:51:48,590 - #13 class
INFO  12:51:48,590 - #22 Base
INFO  12:51:48,590 - #3 {
INFO  12:51:48,592 - #3 {
INFO  12:51:48,592 - #18 void
INFO  12:51:48,592 - #22 meth
INFO  12:51:48,593 - #15 (
INFO  12:51:48,595 - #16 )
INFO  12:51:48,595 - #3 {
INFO  12:51:48,596 - #4 }
INFO  12:51:48,597 - #4 }
INFO  12:51:48,598 - #4 }
INFO  12:51:48,598 - #13 class
INFO  12:51:48,599 - #22 Derived
INFO  12:51:48,599 - #14 extends
INFO  12:51:48,599 - #22 Base
INFO  12:51:48,599 - #3 {
INFO  12:51:48,600 - #4 }
INFO  12:51:48,601 - #13 class
INFO  12:51:48,601 - #22 B
INFO  12:51:48,601 - #3 {
INFO  12:51:48,601 - #22 int
INFO  12:51:48,601 - #22 baseField
INFO  12:51:48,601 - #10 [
INFO  12:51:48,601 - #11 ]
INFO  12:51:48,601 - #6 ;
INFO  12:51:48,602 - #22 int
INFO  12:51:48,602 - #22 xyza
INFO  12:51:48,602 - #6 ;
INFO  12:51:48,602 - #3 {
INFO  12:51:48,603 - #22 B
INFO  12:51:48,603 - #15 (
INFO  12:51:48,604 - #22 int
ERROR 12:51:48,604 - 
Sintaksna greska na liniji 22
INFO  12:51:48,605 - #22 k
INFO  12:51:48,605 - #16 )
INFO  12:51:48,605 - #22 int
INFO  12:51:48,606 - #22 a
INFO  12:51:48,606 - #7 ,
INFO  12:51:48,606 - #22 j
INFO  12:51:48,606 - #6 ;
INFO  12:51:48,606 - #3 {
INFO  12:51:48,606 - #4 }
INFO  12:51:48,606 - #22 int
ERROR 12:51:48,606 - 
Sintaksna greska na liniji 25
INFO  12:51:48,606 - #22 xyz
INFO  12:51:48,607 - #15 (
INFO  12:51:48,607 - #22 Base
INFO  12:51:48,607 - #22 j
INFO  12:51:48,607 - #16 )
INFO  12:51:48,607 - #3 {
INFO  12:51:48,607 - #31 return
INFO  12:51:48,607 - #20 0
INFO  12:51:48,607 - #6 ;
INFO  12:51:48,607 - #4 }
INFO  12:51:48,607 - #4 }
INFO  12:51:48,608 - #4 }
INFO  12:51:48,608 - #13 class
INFO  12:51:48,608 - #22 A
INFO  12:51:48,608 - #14 extends
INFO  12:51:48,608 - #22 B
INFO  12:51:48,608 - #3 {
INFO  12:51:48,608 - #22 int
INFO  12:51:48,608 - #22 x
INFO  12:51:48,608 - #6 ;
ERROR 12:51:48,608 - 
Sintaksna greska na liniji 31
INFO  12:51:48,608 - #3 {
INFO  12:51:48,609 - #22 A
INFO  12:51:48,609 - #15 (
INFO  12:51:48,609 - #22 int
ERROR 12:51:48,609 - 
Sintaksna greska na liniji 33
INFO  12:51:48,609 - #22 k
INFO  12:51:48,609 - #16 )
INFO  12:51:48,609 - #3 {
INFO  12:51:48,609 - #50 super
INFO  12:51:48,609 - #15 (
INFO  12:51:48,609 - #20 2
INFO  12:51:48,609 - #16 )
INFO  12:51:48,609 - #6 ;
INFO  12:51:48,609 - #4 }
INFO  12:51:48,610 - #22 int
INFO  12:51:48,610 - #22 mmm
INFO  12:51:48,610 - #15 (
ERROR 12:51:48,610 - 
Sintaksna greska na liniji 37
INFO  12:51:48,610 - #16 )
INFO  12:51:48,610 - #3 {
INFO  12:51:48,610 - #31 return
INFO  12:51:48,610 - #20 1
INFO  12:51:48,611 - #6 ;
INFO  12:51:48,611 - #4 }
INFO  12:51:48,611 - #22 int
INFO  12:51:48,611 - #22 xyz
INFO  12:51:48,611 - #15 (
INFO  12:51:48,611 - #22 Base
INFO  12:51:48,611 - #22 h
INFO  12:51:48,611 - #16 )
INFO  12:51:48,611 - #22 int
INFO  12:51:48,611 - #22 x
INFO  12:51:48,612 - #6 ;
INFO  12:51:48,612 - #3 {
INFO  12:51:48,612 - #50 super
INFO  12:51:48,612 - #15 (
INFO  12:51:48,612 - #22 h
INFO  12:51:48,612 - #16 )
INFO  12:51:48,612 - #6 ;
INFO  12:51:48,613 - #49 this
INFO  12:51:48,613 - #17 .
INFO  12:51:48,613 - #22 mmm
INFO  12:51:48,613 - #15 (
INFO  12:51:48,613 - #16 )
INFO  12:51:48,613 - #6 ;
INFO  12:51:48,613 - #49 this
INFO  12:51:48,613 - #17 .
INFO  12:51:48,613 - #22 A
INFO  12:51:48,613 - #15 (
INFO  12:51:48,613 - #16 )
INFO  12:51:48,613 - #6 ;
INFO  12:51:48,614 - #22 Label
INFO  12:51:48,614 - #8 :
INFO  12:51:48,614 - #49 this
INFO  12:51:48,614 - #17 .
INFO  12:51:48,614 - #22 x
INFO  12:51:48,614 - #47 ++
INFO  12:51:48,614 - #6 ;
INFO  12:51:48,614 - #22 h
INFO  12:51:48,614 - #17 .
INFO  12:51:48,614 - #22 meth
INFO  12:51:48,614 - #15 (
INFO  12:51:48,615 - #16 )
INFO  12:51:48,622 - #6 ;
INFO  12:51:48,622 - #24 if
INFO  12:51:48,622 - #15 (
INFO  12:51:48,622 - #50 super
INFO  12:51:48,623 - #15 (
INFO  12:51:48,623 - #22 h
INFO  12:51:48,623 - #16 )
INFO  12:51:48,623 - #34 ==
INFO  12:51:48,623 - #20 1
INFO  12:51:48,623 - #16 )
INFO  12:51:48,623 - #22 mmm
INFO  12:51:48,623 - #15 (
INFO  12:51:48,623 - #16 )
INFO  12:51:48,623 - #6 ;
INFO  12:51:48,624 - #22 xyz
INFO  12:51:48,624 - #15 (
INFO  12:51:48,624 - #22 h
INFO  12:51:48,624 - #16 )
INFO  12:51:48,624 - #6 ;
INFO  12:51:48,624 - #31 return
INFO  12:51:48,624 - #20 1
INFO  12:51:48,624 - #6 ;
INFO  12:51:48,624 - #4 }
INFO  12:51:48,624 - #4 }
INFO  12:51:48,624 - #4 }
INFO  12:51:48,624 - #12 record
INFO  12:51:48,625 - #22 M
INFO  12:51:48,625 - #3 {
INFO  12:51:48,625 - #22 Derived
INFO  12:51:48,625 - #22 ddd
INFO  12:51:48,625 - #6 ;
INFO  12:51:48,625 - #4 }
INFO  12:51:48,625 - #22 A
INFO  12:51:48,625 - #22 niz
INFO  12:51:48,625 - #10 [
INFO  12:51:48,625 - #11 ]
INFO  12:51:48,625 - #6 ;
INFO  12:51:48,626 - #22 int
INFO  12:51:48,626 - #22 pom
INFO  12:51:48,626 - #6 ;
INFO  12:51:48,627 - #22 M
INFO  12:51:48,627 - #22 m
INFO  12:51:48,627 - #6 ;
INFO  12:51:48,627 - #3 {
INFO  12:51:48,627 - #22 B
INFO  12:51:48,627 - #22 method
INFO  12:51:48,628 - #15 (
INFO  12:51:48,628 - #22 B
INFO  12:51:48,628 - #22 d
INFO  12:51:48,628 - #7 ,
INFO  12:51:48,628 - #22 A
INFO  12:51:48,628 - #22 a
INFO  12:51:48,628 - #16 )
INFO  12:51:48,628 - #22 int
INFO  12:51:48,628 - #22 h
INFO  12:51:48,628 - #6 ;
INFO  12:51:48,628 - #3 {
INFO  12:51:48,630 - #24 if
INFO  12:51:48,630 - #15 (
INFO  12:51:48,630 - #20 1
INFO  12:51:48,630 - #36 >
INFO  12:51:48,630 - #20 0
INFO  12:51:48,632 - #40 &&
INFO  12:51:48,633 - #19 new
INFO  12:51:48,633 - #22 A
INFO  12:51:48,633 - #34 ==
INFO  12:51:48,633 - #19 new
INFO  12:51:48,635 - #22 A
INFO  12:51:48,635 - #16 )
INFO  12:51:48,636 - #3 {
INFO  12:51:48,636 - #33 print
INFO  12:51:48,636 - #15 (
INFO  12:51:48,636 - #23 'j'
INFO  12:51:48,636 - #16 )
INFO  12:51:48,636 - #6 ;
INFO  12:51:48,636 - #31 return
INFO  12:51:48,637 - #19 new
INFO  12:51:48,637 - #22 A
INFO  12:51:48,637 - #6 ;
INFO  12:51:48,637 - #4 }
INFO  12:51:48,637 - #4 }
INFO  12:51:48,637 - #22 A
INFO  12:51:48,638 - #22 abc
INFO  12:51:48,638 - #15 (
INFO  12:51:48,638 - #22 int
INFO  12:51:48,638 - #22 qjk
INFO  12:51:48,638 - #16 )
INFO  12:51:48,638 - #3 {
INFO  12:51:48,638 - #31 return
INFO  12:51:48,638 - #19 new
INFO  12:51:48,638 - #22 A
INFO  12:51:48,639 - #6 ;
INFO  12:51:48,639 - #4 }
INFO  12:51:48,639 - #18 void
INFO  12:51:48,639 - #22 main
INFO  12:51:48,639 - #15 (
INFO  12:51:48,639 - #22 A
INFO  12:51:48,639 - #22 a
INFO  12:51:48,639 - #16 )
INFO  12:51:48,639 - #22 int
INFO  12:51:48,639 - #22 i
INFO  12:51:48,639 - #6 ;
INFO  12:51:48,639 - #3 {
INFO  12:51:48,639 - #26 goto
INFO  12:51:48,639 - #22 LABELA
INFO  12:51:48,640 - #6 ;
INFO  12:51:48,641 - #22 LABELA
INFO  12:51:48,641 - #8 :
INFO  12:51:48,641 - #22 a
INFO  12:51:48,642 - #17 .
INFO  12:51:48,642 - #22 baseField
INFO  12:51:48,642 - #10 [
INFO  12:51:48,643 - #20 0
INFO  12:51:48,643 - #11 ]
INFO  12:51:48,643 - #47 ++
INFO  12:51:48,644 - #6 ;
INFO  12:51:48,645 - #22 niz
INFO  12:51:48,645 - #10 [
INFO  12:51:48,645 - #22 a
INFO  12:51:48,645 - #17 .
INFO  12:51:48,645 - #22 baseField
INFO  12:51:48,645 - #10 [
INFO  12:51:48,645 - #20 0
INFO  12:51:48,646 - #11 ]
INFO  12:51:48,646 - #11 ]
INFO  12:51:48,647 - #17 .
INFO  12:51:48,647 - #22 baseField
INFO  12:51:48,647 - #10 [
INFO  12:51:48,647 - #20 2
INFO  12:51:48,648 - #11 ]
INFO  12:51:48,648 - #47 ++
INFO  12:51:48,648 - #6 ;
INFO  12:51:48,648 - #27 do
INFO  12:51:48,648 - #3 {
INFO  12:51:48,649 - #32 read
INFO  12:51:48,649 - #15 (
INFO  12:51:48,649 - #22 a
INFO  12:51:48,649 - #17 .
INFO  12:51:48,650 - #22 baseField
INFO  12:51:48,650 - #10 [
INFO  12:51:48,650 - #20 0
INFO  12:51:48,650 - #11 ]
INFO  12:51:48,650 - #16 )
INFO  12:51:48,650 - #6 ;
INFO  12:51:48,650 - #22 a
INFO  12:51:48,651 - #17 .
INFO  12:51:48,652 - #22 xyz
INFO  12:51:48,652 - #15 (
INFO  12:51:48,653 - #22 m
INFO  12:51:48,654 - #17 .
INFO  12:51:48,654 - #22 ddd
INFO  12:51:48,654 - #16 )
INFO  12:51:48,654 - #6 ;
INFO  12:51:48,654 - #22 method
INFO  12:51:48,655 - #15 (
INFO  12:51:48,655 - #22 niz
INFO  12:51:48,655 - #10 [
INFO  12:51:48,655 - #20 0
INFO  12:51:48,655 - #11 ]
INFO  12:51:48,655 - #7 ,
INFO  12:51:48,655 - #22 niz
INFO  12:51:48,656 - #10 [
INFO  12:51:48,656 - #20 1
INFO  12:51:48,656 - #11 ]
INFO  12:51:48,656 - #16 )
INFO  12:51:48,656 - #6 ;
INFO  12:51:48,656 - #22 abc
INFO  12:51:48,656 - #15 (
INFO  12:51:48,656 - #22 a
INFO  12:51:48,656 - #17 .
INFO  12:51:48,656 - #22 mmm
INFO  12:51:48,657 - #15 (
INFO  12:51:48,657 - #16 )
INFO  12:51:48,657 - #16 )
INFO  12:51:48,657 - #6 ;
INFO  12:51:48,657 - #30 continue
INFO  12:51:48,657 - #6 ;
INFO  12:51:48,657 - #4 }
INFO  12:51:48,658 - #28 while
INFO  12:51:48,659 - #15 (
INFO  12:51:48,659 - #20 1
INFO  12:51:48,659 - #36 >
INFO  12:51:48,659 - #20 0
INFO  12:51:48,659 - #16 )
INFO  12:51:48,659 - #6 ;
INFO  12:51:48,659 - #22 a
INFO  12:51:48,660 - #17 .
INFO  12:51:48,660 - #22 mmm
INFO  12:51:48,660 - #15 (
INFO  12:51:48,660 - #16 )
INFO  12:51:48,660 - #6 ;
INFO  12:51:48,660 - #4 }
INFO  12:51:48,661 - #4 }
INFO  12:51:48,690 - Program(
  ProgramName(
   p
  ) [ProgramName]
  DeclListVar(
    DeclListVar(
      DeclListVar(
        DeclListClass(
          DeclListClass(
            DeclListClass(
              DeclListVar(
                DeclListConst(
                  DeclListConst(
                    DeclListConst(
                      DeclListEmpty(
                      ) [DeclListEmpty]
                      DeclConst(
                        Type(
                         int
                        ) [Type]
                        ConstDeclMultiple(
                          ConstDeclMultiple(
                            ConstDeclSingle(
                              ConstDeclElemCorrect(
                               size
                                ConstLitNum(
                                 10
                                ) [ConstLitNum]
                              ) [ConstDeclElemCorrect]
                            ) [ConstDeclSingle]
                            ConstDeclElemCorrect(
                             jaab
                              ConstLitNum(
                               0
                              ) [ConstLitNum]
                            ) [ConstDeclElemCorrect]
                          ) [ConstDeclMultiple]
                          ConstDeclElemCorrect(
                           xx
                            ConstLitNum(
                             5
                            ) [ConstLitNum]
                          ) [ConstDeclElemCorrect]
                        ) [ConstDeclMultiple]
                      ) [DeclConst]
                    ) [DeclListConst]
                    DeclConst(
                      Type(
                       char
                      ) [Type]
                      ConstDeclSingle(
                        ConstDeclElemCorrect(
                         variable
                          ConstLitChar(
                           'p'
                          ) [ConstLitChar]
                        ) [ConstDeclElemCorrect]
                      ) [ConstDeclSingle]
                    ) [DeclConst]
                  ) [DeclListConst]
                  DeclConst(
                    Type(
                     bool
                    ) [Type]
                    ConstDeclSingle(
                      ConstDeclElemCorrect(
                       xyz
                        ConstLitBool(
                         0
                        ) [ConstLitBool]
                      ) [ConstDeclElemCorrect]
                    ) [ConstDeclSingle]
                  ) [DeclConst]
                ) [DeclListConst]
                VarDeclGlobalCorrect(
                  Type(
                   int
                  ) [Type]
                  VarDeclMultiple(
                    VarDeclSingle(
                      VarDeclElemSingle(
                       xyza
                      ) [VarDeclElemSingle]
                    ) [VarDeclSingle]
                    VarDeclElemArray(
                     jana2
                    ) [VarDeclElemArray]
                  ) [VarDeclMultiple]
                ) [VarDeclGlobalCorrect]
              ) [DeclListVar]
              ClassDecl(
                ClassName(
                 Base
                ) [ClassName]
                ExtendsDeclEmpty(
                ) [ExtendsDeclEmpty]
                ClassDeclsMethods(
                  InnerMethodBlockNoConstr(
                    MethodDecls(
                      MethodDeclNoPar(
                        MethodDeclChecker(
                          RetTypeVoid(
                          ) [RetTypeVoid]
                          MethodName(
                           meth
                          ) [MethodName]
                        ) [MethodDeclChecker]
                        InnerVarDeclsEmpty(
                        ) [InnerVarDeclsEmpty]
                        StatementsEmpty(
                        ) [StatementsEmpty]
                      ) [MethodDeclNoPar]
                      MethodDeclsEmpty(
                      ) [MethodDeclsEmpty]
                    ) [MethodDecls]
                  ) [InnerMethodBlockNoConstr]
                ) [ClassDeclsMethods]
              ) [ClassDecl]
            ) [DeclListClass]
            ClassDecl(
              ClassName(
               Derived
              ) [ClassName]
              ExtendsDeclType(
                Type(
                 Base
                ) [Type]
              ) [ExtendsDeclType]
              ClassDeclsEmpty(
              ) [ClassDeclsEmpty]
            ) [ClassDecl]
          ) [DeclListClass]
          ClassDecl(
            ClassName(
             B
            ) [ClassName]
            ExtendsDeclEmpty(
            ) [ExtendsDeclEmpty]
            ClassVarDecls(
              VarDeclsCorrect(
                Type(
                 int
                ) [Type]
                VarDeclSingleNoC(
                  VarDeclElemArrayNoC(
                   baseField
                  ) [VarDeclElemArrayNoC]
                ) [VarDeclSingleNoC]
              ) [VarDeclsCorrect]
              ClassVarDecls(
                VarDeclsCorrect(
                  Type(
                   int
                  ) [Type]
                  VarDeclSingleNoC(
                    VarDeclElemSingleNoC(
                     xyza
                    ) [VarDeclElemSingleNoC]
                  ) [VarDeclSingleNoC]
                ) [VarDeclsCorrect]
                ClassVarDeclsError(
                  ClassVarDeclsError(
                    ClassVarDeclsError(
                      ClassDeclsEmpty(
                      ) [ClassDeclsEmpty]
                    ) [ClassVarDeclsError]
                  ) [ClassVarDeclsError]
                ) [ClassVarDeclsError]
              ) [ClassVarDecls]
            ) [ClassVarDecls]
          ) [ClassDecl]
        ) [DeclListClass]
        VarDeclGlobalCorrect(
          Type(
           int
          ) [Type]
          VarDeclSingle(
            VarDeclError(
            ) [VarDeclError]
          ) [VarDeclSingle]
        ) [VarDeclGlobalCorrect]
      ) [DeclListVar]
      VarDeclGlobalCorrect(
        Type(
         int
        ) [Type]
        VarDeclSingle(
          VarDeclElemSingle(
           pom
          ) [VarDeclElemSingle]
        ) [VarDeclSingle]
      ) [VarDeclGlobalCorrect]
    ) [DeclListVar]
    VarDeclGlobalCorrect(
      Type(
       M
      ) [Type]
      VarDeclSingle(
        VarDeclElemSingle(
         m
        ) [VarDeclElemSingle]
      ) [VarDeclSingle]
    ) [VarDeclGlobalCorrect]
  ) [DeclListVar]
  MethodDecls(
    MethodDeclPar(
      MethodDeclChecker(
        RetTypeType(
          Type(
           B
          ) [Type]
        ) [RetTypeType]
        MethodName(
         method
        ) [MethodName]
      ) [MethodDeclChecker]
      FormParsMultiple(
        FormParsSingle(
          Type(
           B
          ) [Type]
         d
        ) [FormParsSingle]
        Type(
         A
        ) [Type]
       a
      ) [FormParsMultiple]
      InnerVarDecls(
        InnerVarDeclsEmpty(
        ) [InnerVarDeclsEmpty]
        VarDecl(
          Type(
           int
          ) [Type]
          VarDeclSingleNoC(
            VarDeclElemSingleNoC(
             h
            ) [VarDeclElemSingleNoC]
          ) [VarDeclSingleNoC]
        ) [VarDecl]
      ) [InnerVarDecls]
      StatementsList(
        StatementsEmpty(
        ) [StatementsEmpty]
        StatementSingle(
          StmtIf(
            CondSingle(
              CondTermMultiple(
                CondTermSingle(
                  CondFactMultiple(
                    ExprSingle(
                      TermSingle(
                        FactorNumber(
                         1
                        ) [FactorNumber]
                      ) [TermSingle]
                    ) [ExprSingle]
                    RelopGrt(
                    ) [RelopGrt]
                    ExprSingle(
                      TermSingle(
                        FactorNumber(
                         0
                        ) [FactorNumber]
                      ) [TermSingle]
                    ) [ExprSingle]
                  ) [CondFactMultiple]
                ) [CondTermSingle]
                CondFactMultipleEq(
                  ExprSingle(
                    TermSingle(
                      FactorObject(
                        Type(
                         A
                        ) [Type]
                      ) [FactorObject]
                    ) [TermSingle]
                  ) [ExprSingle]
                  RelopEqu(
                  ) [RelopEqu]
                  ExprSingle(
                    TermSingle(
                      FactorObject(
                        Type(
                         A
                        ) [Type]
                      ) [FactorObject]
                    ) [TermSingle]
                  ) [ExprSingle]
                ) [CondFactMultipleEq]
              ) [CondTermMultiple]
            ) [CondSingle]
            StatementMultiple(
              StatementsBlock(
                StatementsList(
                  StatementsList(
                    StatementsEmpty(
                    ) [StatementsEmpty]
                    StatementSingle(
                      StmtPrint(
                        ExprSingle(
                          TermSingle(
                            FactorChar(
                             'j'
                            ) [FactorChar]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [StmtPrint]
                    ) [StatementSingle]
                  ) [StatementsList]
                  StatementSingle(
                    StmtReturn(
                      ExprSingle(
                        TermSingle(
                          FactorObject(
                            Type(
                             A
                            ) [Type]
                          ) [FactorObject]
                        ) [TermSingle]
                      ) [ExprSingle]
                    ) [StmtReturn]
                  ) [StatementSingle]
                ) [StatementsList]
              ) [StatementsBlock]
            ) [StatementMultiple]
          ) [StmtIf]
        ) [StatementSingle]
      ) [StatementsList]
    ) [MethodDeclPar]
    MethodDecls(
      MethodDeclPar(
        MethodDeclChecker(
          RetTypeType(
            Type(
             A
            ) [Type]
          ) [RetTypeType]
          MethodName(
           abc
          ) [MethodName]
        ) [MethodDeclChecker]
        FormParsSingle(
          Type(
           int
          ) [Type]
         qjk
        ) [FormParsSingle]
        InnerVarDeclsEmpty(
        ) [InnerVarDeclsEmpty]
        StatementsList(
          StatementsEmpty(
          ) [StatementsEmpty]
          StatementSingle(
            StmtReturn(
              ExprSingle(
                TermSingle(
                  FactorObject(
                    Type(
                     A
                    ) [Type]
                  ) [FactorObject]
                ) [TermSingle]
              ) [ExprSingle]
            ) [StmtReturn]
          ) [StatementSingle]
        ) [StatementsList]
      ) [MethodDeclPar]
      MethodDecls(
        MethodDeclPar(
          MethodDeclChecker(
            RetTypeVoid(
            ) [RetTypeVoid]
            MethodName(
             main
            ) [MethodName]
          ) [MethodDeclChecker]
          FormParsSingle(
            Type(
             A
            ) [Type]
           a
          ) [FormParsSingle]
          InnerVarDecls(
            InnerVarDeclsEmpty(
            ) [InnerVarDeclsEmpty]
            VarDecl(
              Type(
               int
              ) [Type]
              VarDeclSingleNoC(
                VarDeclElemSingleNoC(
                 i
                ) [VarDeclElemSingleNoC]
              ) [VarDeclSingleNoC]
            ) [VarDecl]
          ) [InnerVarDecls]
          StatementsList(
            StatementsList(
              StatementsList(
                StatementsList(
                  StatementsList(
                    StatementsEmpty(
                    ) [StatementsEmpty]
                    StatementSingle(
                      StmtGoto(
                        Label(
                         LABELA
                        ) [Label]
                      ) [StmtGoto]
                    ) [StatementSingle]
                  ) [StatementsList]
                  StatementSingleLabel(
                    LabelDef(
                      Label(
                       LABELA
                      ) [Label]
                    ) [LabelDef]
                    StmtDesign(
                      DsgnOpInc(
                        CallName(
                          DesignatorAccessArray(
                            DesignatorAccessField(
                              DesignatorFirst(
                               a
                              ) [DesignatorFirst]
                             baseField
                            ) [DesignatorAccessField]
                            ExprSingle(
                              TermSingle(
                                FactorNumber(
                                 0
                                ) [FactorNumber]
                              ) [TermSingle]
                            ) [ExprSingle]
                          ) [DesignatorAccessArray]
                        ) [CallName]
                      ) [DsgnOpInc]
                    ) [StmtDesign]
                  ) [StatementSingleLabel]
                ) [StatementsList]
                StatementSingle(
                  StmtDesign(
                    DsgnOpInc(
                      CallName(
                        DesignatorAccessArray(
                          DesignatorAccessField(
                            DesignatorAccessArray(
                              DesignatorFirst(
                               niz
                              ) [DesignatorFirst]
                              ExprSingle(
                                TermSingle(
                                  FactorDsgn(
                                    FactorDesignator(
                                      DesignatorAccessArray(
                                        DesignatorAccessField(
                                          DesignatorFirst(
                                           a
                                          ) [DesignatorFirst]
                                         baseField
                                        ) [DesignatorAccessField]
                                        ExprSingle(
                                          TermSingle(
                                            FactorNumber(
                                             0
                                            ) [FactorNumber]
                                          ) [TermSingle]
                                        ) [ExprSingle]
                                      ) [DesignatorAccessArray]
                                    ) [FactorDesignator]
                                  ) [FactorDsgn]
                                ) [TermSingle]
                              ) [ExprSingle]
                            ) [DesignatorAccessArray]
                           baseField
                          ) [DesignatorAccessField]
                          ExprSingle(
                            TermSingle(
                              FactorNumber(
                               2
                              ) [FactorNumber]
                            ) [TermSingle]
                          ) [ExprSingle]
                        ) [DesignatorAccessArray]
                      ) [CallName]
                    ) [DsgnOpInc]
                  ) [StmtDesign]
                ) [StatementSingle]
              ) [StatementsList]
              StatementSingle(
                StmtDoWhile(
                  DoStart(
                  ) [DoStart]
                  StatementMultiple(
                    StatementsBlock(
                      StatementsList(
                        StatementsList(
                          StatementsList(
                            StatementsList(
                              StatementsList(
                                StatementsEmpty(
                                ) [StatementsEmpty]
                                StatementSingle(
                                  StmtRead(
                                    DesignatorAccessArray(
                                      DesignatorAccessField(
                                        DesignatorFirst(
                                         a
                                        ) [DesignatorFirst]
                                       baseField
                                      ) [DesignatorAccessField]
                                      ExprSingle(
                                        TermSingle(
                                          FactorNumber(
                                           0
                                          ) [FactorNumber]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [DesignatorAccessArray]
                                  ) [StmtRead]
                                ) [StatementSingle]
                              ) [StatementsList]
                              StatementSingle(
                                StmtDesign(
                                  DsgnOpCallPars(
                                    CallName(
                                      DesignatorAccessField(
                                        DesignatorFirst(
                                         a
                                        ) [DesignatorFirst]
                                       xyz
                                      ) [DesignatorAccessField]
                                    ) [CallName]
                                    CopyDsgn(
                                    ) [CopyDsgn]
                                    ActParsSingle(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDsgn(
                                            FactorDesignator(
                                              DesignatorAccessField(
                                                DesignatorFirst(
                                                 m
                                                ) [DesignatorFirst]
                                               ddd
                                              ) [DesignatorAccessField]
                                            ) [FactorDesignator]
                                          ) [FactorDsgn]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ActParsSingle]
                                  ) [DsgnOpCallPars]
                                ) [StmtDesign]
                              ) [StatementSingle]
                            ) [StatementsList]
                            StatementSingle(
                              StmtDesign(
                                DsgnOpCallPars(
                                  CallName(
                                    DesignatorFirst(
                                     method
                                    ) [DesignatorFirst]
                                  ) [CallName]
                                  CopyDsgn(
                                  ) [CopyDsgn]
                                  ActParsMultiple(
                                    ActParsSingle(
                                      ExprSingle(
                                        TermSingle(
                                          FactorDsgn(
                                            FactorDesignator(
                                              DesignatorAccessArray(
                                                DesignatorFirst(
                                                 niz
                                                ) [DesignatorFirst]
                                                ExprSingle(
                                                  TermSingle(
                                                    FactorNumber(
                                                     0
                                                    ) [FactorNumber]
                                                  ) [TermSingle]
                                                ) [ExprSingle]
                                              ) [DesignatorAccessArray]
                                            ) [FactorDesignator]
                                          ) [FactorDsgn]
                                        ) [TermSingle]
                                      ) [ExprSingle]
                                    ) [ActParsSingle]
                                    ExprSingle(
                                      TermSingle(
                                        FactorDsgn(
                                          FactorDesignator(
                                            DesignatorAccessArray(
                                              DesignatorFirst(
                                               niz
                                              ) [DesignatorFirst]
                                              ExprSingle(
                                                TermSingle(
                                                  FactorNumber(
                                                   1
                                                  ) [FactorNumber]
                                                ) [TermSingle]
                                              ) [ExprSingle]
                                            ) [DesignatorAccessArray]
                                          ) [FactorDesignator]
                                        ) [FactorDsgn]
                                      ) [TermSingle]
                                    ) [ExprSingle]
                                  ) [ActParsMultiple]
                                ) [DsgnOpCallPars]
                              ) [StmtDesign]
                            ) [StatementSingle]
                          ) [StatementsList]
                          StatementSingle(
                            StmtDesign(
                              DsgnOpCallPars(
                                CallName(
                                  DesignatorFirst(
                                   abc
                                  ) [DesignatorFirst]
                                ) [CallName]
                                CopyDsgn(
                                ) [CopyDsgn]
                                ActParsSingle(
                                  ExprSingle(
                                    TermSingle(
                                      FactorDsgnCallEmpty(
                                        FactorDesignator(
                                          DesignatorAccessField(
                                            DesignatorFirst(
                                             a
                                            ) [DesignatorFirst]
                                           mmm
                                          ) [DesignatorAccessField]
                                        ) [FactorDesignator]
                                        CopyDsgn(
                                        ) [CopyDsgn]
                                      ) [FactorDsgnCallEmpty]
                                    ) [TermSingle]
                                  ) [ExprSingle]
                                ) [ActParsSingle]
                              ) [DsgnOpCallPars]
                            ) [StmtDesign]
                          ) [StatementSingle]
                        ) [StatementsList]
                        StatementSingle(
                          StmtContinue(
                          ) [StmtContinue]
                        ) [StatementSingle]
                      ) [StatementsList]
                    ) [StatementsBlock]
                  ) [StatementMultiple]
                  CondSingle(
                    CondTermSingle(
                      CondFactMultiple(
                        ExprSingle(
                          TermSingle(
                            FactorNumber(
                             1
                            ) [FactorNumber]
                          ) [TermSingle]
                        ) [ExprSingle]
                        RelopGrt(
                        ) [RelopGrt]
                        ExprSingle(
                          TermSingle(
                            FactorNumber(
                             0
                            ) [FactorNumber]
                          ) [TermSingle]
                        ) [ExprSingle]
                      ) [CondFactMultiple]
                    ) [CondTermSingle]
                  ) [CondSingle]
                ) [StmtDoWhile]
              ) [StatementSingle]
            ) [StatementsList]
            StatementSingle(
              StmtDesign(
                DsgnOpCallEmpty(
                  CallName(
                    DesignatorAccessField(
                      DesignatorFirst(
                       a
                      ) [DesignatorFirst]
                     mmm
                    ) [DesignatorAccessField]
                  ) [CallName]
                  CopyDsgn(
                  ) [CopyDsgn]
                ) [DsgnOpCallEmpty]
              ) [StmtDesign]
            ) [StatementSingle]
          ) [StatementsList]
        ) [MethodDeclPar]
        MethodDeclsEmpty(
        ) [MethodDeclsEmpty]
      ) [MethodDecls]
    ) [MethodDecls]
  ) [MethodDecls]
) [Program]
INFO  12:51:48,710 - Pronadjen simbol: p na liniji 1
INFO  12:51:48,710 - Pronadjen simbol: size na liniji 2
INFO  12:51:48,710 - Pronadjen simbol: jaab na liniji 2
INFO  12:51:48,710 - Pronadjen simbol: xx na liniji 2
INFO  12:51:48,710 - Pronadjen simbol: variable na liniji 3
INFO  12:51:48,711 - Pronadjen simbol: xyz na liniji 4
INFO  12:51:48,711 - Pronadjen simbol: xyza na liniji 5
INFO  12:51:48,711 - Pronadjen simbol: jana2 na liniji 5
INFO  12:51:48,711 - Pronadjen simbol: Base na liniji 6
INFO  12:51:48,712 - Pronadjen simbol: meth na liniji 9
INFO  12:51:48,712 - Pronadjen simbol: Derived na liniji 15
INFO  12:51:48,712 - Pronadjen simbol: B na liniji 18
INFO  12:51:48,712 - Pronadjen simbol: baseField na liniji 19
INFO  12:51:48,713 - Pronadjen simbol: xyza na liniji 20
ERROR 12:51:48,713 - Izvrsen oporavak od greske.  na liniji 24
ERROR 12:51:48,713 - Izvrsen oporavak od greske.  na liniji 32
ERROR 12:51:48,713 - Izvrsen oporavak od greske.  na liniji 22
ERROR 12:51:48,713 - Izvrsen oporavak od greske. 
INFO  12:51:48,713 - Pronadjen simbol: pom na liniji 60
ERROR 12:51:48,716 - Nije pronadjen tip M u tabeli simbola! 
INFO  12:51:48,717 - Pronadjen simbol: method na liniji 64
INFO  12:51:48,718 - Pronadjen simbol: d na liniji 64
ERROR 12:51:48,718 - Nije pronadjen tip A u tabeli simbola! 
INFO  12:51:48,718 - Pronadjen simbol: a na liniji 64
INFO  12:51:48,718 - Pronadjen simbol: h na liniji 64
ERROR 12:51:48,718 - Nije pronadjen tip A u tabeli simbola! 
ERROR 12:51:48,719 - Nije pronadjen tip A u tabeli simbola! 
ERROR 12:51:48,719 - Nije pronadjen tip A u tabeli simbola! 
ERROR 12:51:48,719 - Tip izraza return naredbe nije jednak tipu fje: method! na liniji 70
ERROR 12:51:48,720 - Metoda: method nema return naredbu na liniji 64
ERROR 12:51:48,720 - Nije pronadjen tip A u tabeli simbola! 
INFO  12:51:48,720 - Pronadjen simbol: abc na liniji 73
INFO  12:51:48,720 - Pronadjen simbol: qjk na liniji 73
ERROR 12:51:48,720 - Nije pronadjen tip A u tabeli simbola! 
INFO  12:51:48,721 - Pronadjen simbol: main na liniji 74
ERROR 12:51:48,721 - Nije pronadjen tip A u tabeli simbola! 
INFO  12:51:48,721 - Pronadjen simbol: i na liniji 74
INFO  12:51:48,722 - Pronadjen simbol: LABELA na liniji 76
INFO  12:51:48,722 - Upotreba simbola: LABELA prihvacena na liniji 75
ERROR 12:51:48,723 - Simbol: Ime a nije deklarisan! na liniji 76
ERROR 12:51:48,723 - Simbol: Ime noObj nije korisnicki definisanog tipa i nema polja! na liniji 76
ERROR 12:51:48,723 - Simbol: Ime noObj nije nizovskog tipa i ne moze se indeksirati! na liniji 76
ERROR 12:51:48,723 - Argument naredbe ++ mora da bude int! na liniji 76
ERROR 12:51:48,724 - Simbol: Ime niz nije deklarisan! na liniji 77
ERROR 12:51:48,724 - Simbol: Ime a nije deklarisan! na liniji 77
ERROR 12:51:48,724 - Simbol: Ime noObj nije korisnicki definisanog tipa i nema polja! na liniji 77
ERROR 12:51:48,724 - Simbol: Ime noObj nije nizovskog tipa i ne moze se indeksirati! na liniji 77
ERROR 12:51:48,724 - Simbol: Ime noObj nije nizovskog tipa i ne moze se indeksirati! na liniji 77
ERROR 12:51:48,724 - Simbol: Ime noObj nije korisnicki definisanog tipa i nema polja! na liniji 77
ERROR 12:51:48,724 - Simbol: Ime noObj nije nizovskog tipa i ne moze se indeksirati! na liniji 77
ERROR 12:51:48,724 - Argument naredbe ++ mora da bude int! na liniji 77
ERROR 12:51:48,724 - Simbol: Ime a nije deklarisan! na liniji 79
ERROR 12:51:48,724 - Simbol: Ime noObj nije korisnicki definisanog tipa i nema polja! na liniji 79
ERROR 12:51:48,724 - Simbol: Ime noObj nije nizovskog tipa i ne moze se indeksirati! na liniji 79
ERROR 12:51:48,724 - Argument naredbe read mora da bude int, char ili bool tipa! na liniji 79
ERROR 12:51:48,724 - Simbol: Ime a nije deklarisan! na liniji 80
ERROR 12:51:48,724 - Simbol: Ime noObj nije korisnicki definisanog tipa i nema polja! na liniji 80
ERROR 12:51:48,724 - Pokusaj poziva nad simbolom: noObj koji nije metod!
ERROR 12:51:48,725 - Simbol: Ime m nije deklarisan! na liniji 80
ERROR 12:51:48,725 - Simbol: Ime noObj nije korisnicki definisanog tipa i nema polja! na liniji 80
