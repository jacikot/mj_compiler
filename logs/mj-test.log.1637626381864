INFO  03:06:26,692 - Compiling source file: D:\4.godina\pp\pp_projekat\workspace\mj_compiler\test\program.mj
INFO  03:06:26,701 - #1 program
INFO  03:06:26,701 - #18 p
INFO  03:06:26,701 - #6 const
INFO  03:06:26,701 - #18 int
INFO  03:06:26,701 - #18 size
INFO  03:06:26,701 - #35 =
INFO  03:06:26,701 - #19 10
INFO  03:06:26,702 - #39 ;
INFO  03:06:26,702 - #3 class
INFO  03:06:26,702 - #18 Table
INFO  03:06:26,702 - #43 {
INFO  03:06:26,702 - #18 int
INFO  03:06:26,702 - #18 pos
INFO  03:06:26,702 - #45 [
INFO  03:06:26,702 - #46 ]
INFO  03:06:26,702 - #38 ,
INFO  03:06:26,702 - #18 neg
INFO  03:06:26,702 - #45 [
INFO  03:06:26,703 - #46 ]
INFO  03:06:26,703 - #39 ;
INFO  03:06:26,703 - #43 {
INFO  03:06:26,703 - #50 void
INFO  03:06:26,703 - #18 putp
INFO  03:06:26,703 - #41 (
INFO  03:06:26,703 - #18 int
INFO  03:06:26,703 - #18 a
INFO  03:06:26,703 - #38 ,
INFO  03:06:26,703 - #18 int
INFO  03:06:26,704 - #18 idx
INFO  03:06:26,704 - #42 )
INFO  03:06:26,704 - #43 {
INFO  03:06:26,704 - #18 this
INFO  03:06:26,704 - #40 .
INFO  03:06:26,704 - #18 pos
INFO  03:06:26,704 - #45 [
INFO  03:06:26,704 - #18 idx
INFO  03:06:26,704 - #46 ]
INFO  03:06:26,704 - #35 =
INFO  03:06:26,704 - #18 a
INFO  03:06:26,704 - #39 ;
INFO  03:06:26,704 - #44 }
INFO  03:06:26,705 - #50 void
INFO  03:06:26,705 - #18 putn
INFO  03:06:26,705 - #41 (
INFO  03:06:26,705 - #18 int
INFO  03:06:26,705 - #18 a
INFO  03:06:26,705 - #38 ,
INFO  03:06:26,705 - #18 int
INFO  03:06:26,705 - #18 idx
INFO  03:06:26,705 - #42 )
INFO  03:06:26,705 - #43 {
INFO  03:06:26,705 - #18 this
INFO  03:06:26,705 - #40 .
INFO  03:06:26,705 - #18 neg
INFO  03:06:26,705 - #45 [
INFO  03:06:26,706 - #18 idx
INFO  03:06:26,706 - #46 ]
INFO  03:06:26,706 - #35 =
INFO  03:06:26,706 - #18 a
INFO  03:06:26,706 - #39 ;
INFO  03:06:26,706 - #44 }
INFO  03:06:26,706 - #18 int
INFO  03:06:26,706 - #18 getp
INFO  03:06:26,706 - #41 (
INFO  03:06:26,706 - #18 int
INFO  03:06:26,706 - #18 idx
INFO  03:06:26,706 - #42 )
INFO  03:06:26,706 - #43 {
INFO  03:06:26,706 - #17 return
INFO  03:06:26,707 - #18 pos
INFO  03:06:26,707 - #45 [
INFO  03:06:26,707 - #18 idx
INFO  03:06:26,707 - #46 ]
INFO  03:06:26,707 - #39 ;
INFO  03:06:26,707 - #44 }
INFO  03:06:26,707 - #18 int
INFO  03:06:26,707 - #18 getn
INFO  03:06:26,707 - #41 (
INFO  03:06:26,707 - #18 int
INFO  03:06:26,707 - #18 idx
INFO  03:06:26,707 - #42 )
INFO  03:06:26,707 - #43 {
INFO  03:06:26,707 - #17 return
INFO  03:06:26,707 - #18 neg
INFO  03:06:26,707 - #45 [
INFO  03:06:26,708 - #18 idx
INFO  03:06:26,708 - #46 ]
INFO  03:06:26,708 - #39 ;
INFO  03:06:26,708 - #44 }
INFO  03:06:26,708 - #44 }
INFO  03:06:26,708 - #44 }
INFO  03:06:26,708 - #18 Table
INFO  03:06:26,708 - #18 val
INFO  03:06:26,708 - #39 ;
INFO  03:06:26,708 - #43 {
INFO  03:06:26,708 - #50 void
INFO  03:06:26,708 - #18 f
INFO  03:06:26,708 - #41 (
INFO  03:06:26,709 - #18 char
INFO  03:06:26,709 - #18 ch
INFO  03:06:26,714 - #38 ,
INFO  03:06:26,714 - #18 int
INFO  03:06:26,714 - #18 a
INFO  03:06:26,714 - #38 ,
INFO  03:06:26,714 - #18 int
INFO  03:06:26,715 - #18 arg
INFO  03:06:26,715 - #42 )
INFO  03:06:26,715 - #18 int
INFO  03:06:26,715 - #18 x
INFO  03:06:26,715 - #39 ;
INFO  03:06:26,715 - #43 {
INFO  03:06:26,715 - #18 x
INFO  03:06:26,715 - #35 =
INFO  03:06:26,715 - #18 arg
INFO  03:06:26,715 - #39 ;
INFO  03:06:26,715 - #44 }
INFO  03:06:26,715 - #50 void
INFO  03:06:26,715 - #18 main
INFO  03:06:26,715 - #41 (
INFO  03:06:26,715 - #42 )
INFO  03:06:26,715 - #18 int
INFO  03:06:26,716 - #18 x
INFO  03:06:26,716 - #38 ,
INFO  03:06:26,716 - #18 i
INFO  03:06:26,716 - #39 ;
INFO  03:06:26,716 - #18 char
INFO  03:06:26,716 - #18 c
INFO  03:06:26,716 - #39 ;
INFO  03:06:26,716 - #43 {
INFO  03:06:26,716 - #18 val
INFO  03:06:26,716 - #35 =
INFO  03:06:26,716 - #11 new
INFO  03:06:26,716 - #18 Table
INFO  03:06:26,716 - #39 ;
INFO  03:06:26,716 - #18 val
INFO  03:06:26,716 - #40 .
INFO  03:06:26,717 - #18 pos
INFO  03:06:26,717 - #35 =
INFO  03:06:26,717 - #11 new
INFO  03:06:26,717 - #18 int
INFO  03:06:26,717 - #45 [
INFO  03:06:26,717 - #18 size
INFO  03:06:26,717 - #46 ]
INFO  03:06:26,717 - #39 ;
INFO  03:06:26,717 - #18 val
INFO  03:06:26,717 - #40 .
INFO  03:06:26,717 - #18 neg
INFO  03:06:26,717 - #35 =
INFO  03:06:26,717 - #11 new
INFO  03:06:26,717 - #18 int
INFO  03:06:26,717 - #45 [
INFO  03:06:26,718 - #18 size
INFO  03:06:26,718 - #46 ]
INFO  03:06:26,718 - #39 ;
INFO  03:06:26,718 - #18 i
INFO  03:06:26,718 - #35 =
INFO  03:06:26,718 - #19 0
INFO  03:06:26,718 - #39 ;
INFO  03:06:26,718 - #9 do
INFO  03:06:26,718 - #43 {
INFO  03:06:26,718 - #18 val
INFO  03:06:26,718 - #40 .
INFO  03:06:26,718 - #18 putp
INFO  03:06:26,718 - #41 (
INFO  03:06:26,718 - #19 0
INFO  03:06:26,718 - #38 ,
INFO  03:06:26,718 - #18 i
INFO  03:06:26,718 - #42 )
INFO  03:06:26,718 - #39 ;
INFO  03:06:26,718 - #18 val
INFO  03:06:26,719 - #40 .
INFO  03:06:26,719 - #18 putn
INFO  03:06:26,719 - #41 (
INFO  03:06:26,719 - #19 0
INFO  03:06:26,719 - #38 ,
INFO  03:06:26,719 - #18 i
INFO  03:06:26,719 - #42 )
INFO  03:06:26,719 - #39 ;
INFO  03:06:26,719 - #18 i
INFO  03:06:26,719 - #36 ++
INFO  03:06:26,719 - #39 ;
INFO  03:06:26,720 - #44 }
INFO  03:06:26,720 - #10 while
INFO  03:06:26,720 - #41 (
INFO  03:06:26,720 - #18 i
INFO  03:06:26,720 - #31 <
INFO  03:06:26,721 - #18 size
INFO  03:06:26,721 - #42 )
INFO  03:06:26,721 - #39 ;
INFO  03:06:26,721 - #18 f
INFO  03:06:26,721 - #41 (
INFO  03:06:26,721 - #18 c
INFO  03:06:26,721 - #38 ,
INFO  03:06:26,721 - #18 x
INFO  03:06:26,721 - #38 ,
INFO  03:06:26,721 - #18 i
INFO  03:06:26,721 - #42 )
INFO  03:06:26,721 - #39 ;
INFO  03:06:26,721 - #13 read
INFO  03:06:26,721 - #41 (
INFO  03:06:26,721 - #18 x
INFO  03:06:26,721 - #42 )
INFO  03:06:26,722 - #39 ;
INFO  03:06:26,722 - #9 do
INFO  03:06:26,722 - #43 {
INFO  03:06:26,722 - #7 if
INFO  03:06:26,722 - #41 (
INFO  03:06:26,722 - #18 x
INFO  03:06:26,722 - #32 <=
INFO  03:06:26,722 - #19 0
INFO  03:06:26,722 - #42 )
INFO  03:06:26,722 - #2 break
INFO  03:06:26,722 - #39 ;
INFO  03:06:26,722 - #7 if
INFO  03:06:26,722 - #41 (
INFO  03:06:26,722 - #19 0
INFO  03:06:26,722 - #32 <=
INFO  03:06:26,722 - #18 x
INFO  03:06:26,722 - #33 &&
INFO  03:06:26,722 - #18 x
INFO  03:06:26,722 - #31 <
INFO  03:06:26,722 - #18 size
INFO  03:06:26,722 - #42 )
INFO  03:06:26,722 - #43 {
INFO  03:06:26,722 - #18 val
INFO  03:06:26,722 - #40 .
INFO  03:06:26,722 - #18 putp
INFO  03:06:26,722 - #41 (
INFO  03:06:26,722 - #18 val
INFO  03:06:26,722 - #40 .
INFO  03:06:26,723 - #18 getp
INFO  03:06:26,723 - #41 (
INFO  03:06:26,723 - #18 x
INFO  03:06:26,723 - #42 )
INFO  03:06:26,723 - #22 +
INFO  03:06:26,723 - #19 1
INFO  03:06:26,723 - #42 )
INFO  03:06:26,723 - #39 ;
INFO  03:06:26,723 - #44 }
INFO  03:06:26,723 - #5 else
INFO  03:06:26,723 - #7 if
INFO  03:06:26,723 - #41 (
INFO  03:06:26,728 - #18 size
INFO  03:06:26,728 - #31 <
INFO  03:06:26,728 - #18 x
INFO  03:06:26,728 - #33 &&
INFO  03:06:26,728 - #18 x
INFO  03:06:26,728 - #31 <
INFO  03:06:26,728 - #19 0
INFO  03:06:26,729 - #42 )
INFO  03:06:26,729 - #43 {
INFO  03:06:26,729 - #18 val
INFO  03:06:26,729 - #40 .
INFO  03:06:26,729 - #18 putn
INFO  03:06:26,729 - #41 (
INFO  03:06:26,729 - #18 val
INFO  03:06:26,729 - #40 .
INFO  03:06:26,729 - #18 getn
INFO  03:06:26,730 - #41 (
INFO  03:06:26,730 - #18 x
INFO  03:06:26,730 - #42 )
INFO  03:06:26,730 - #22 +
INFO  03:06:26,730 - #19 1
INFO  03:06:26,730 - #42 )
INFO  03:06:26,730 - #39 ;
INFO  03:06:26,730 - #44 }
INFO  03:06:26,730 - #13 read
INFO  03:06:26,730 - #41 (
INFO  03:06:26,730 - #18 x
INFO  03:06:26,730 - #42 )
INFO  03:06:26,730 - #39 ;
INFO  03:06:26,730 - #44 }
INFO  03:06:26,730 - #10 while
INFO  03:06:26,730 - #41 (
INFO  03:06:26,731 - #21 true
INFO  03:06:26,731 - #42 )
INFO  03:06:26,731 - #39 ;
INFO  03:06:26,731 - #12 print
INFO  03:06:26,731 - #41 (
INFO  03:06:26,731 - #18 x
INFO  03:06:26,731 - #31 <
INFO  03:06:26,731 - #19 0
INFO  03:06:26,731 - #47 ?
INFO  03:06:26,731 - #20 '-'
INFO  03:06:26,731 - #48 :
INFO  03:06:26,731 - #20 '+'
INFO  03:06:26,731 - #42 )
INFO  03:06:26,731 - #39 ;
INFO  03:06:26,731 - #44 }
INFO  03:06:26,732 - #44 }
